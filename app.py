# Bank360 - 4 S…ôhif…ôli Versiya
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
import warnings
warnings.filterwarnings('ignore')

# T…ôhl√ºk…ôsiz import-lar
try:
    from sklearn.feature_extraction.text import TfidfVectorizer
    from sklearn.cluster import KMeans
    from sklearn.preprocessing import StandardScaler
    SKLEARN_AVAILABLE = True
except ImportError:
    SKLEARN_AVAILABLE = False
    st.error("scikit-learn qura≈üdƒ±rƒ±lmayƒ±b. √áalƒ±≈üdƒ±rƒ±n: pip install scikit-learn")

try:
    import scipy.stats as stats
    SCIPY_AVAILABLE = True
except ImportError:
    SCIPY_AVAILABLE = False

try:
    import google.generativeai as genai
    GEMINI_AVAILABLE = True
except ImportError:
    GEMINI_AVAILABLE = False
    st.warning("Google Gemini API m√∂vcud deyil. Qura≈üdƒ±rƒ±n: pip install google-generativeai")

# Streamlit s…ôhif…ôni konfiqurasiya et
st.set_page_config(
    page_title="Bank360 Analitika",
    page_icon="üè¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

def initialize_session_state():
    """Session state-i d√ºzg√ºn default-larla ba≈ülat"""
    defaults = {
        'language': 'az',
        'complaint_data': None,
        'loan_data': None,
        'gemini_api_key': "",
        'knowledge_base': None,
        'initialized': False
    }
    
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value

@st.cache_data
def generate_sample_data_fixed():
    """N√ºmun…ô m…ôlumatlarƒ± d√ºzg√ºn x…ôta idar…ôetm…ôsi v…ô ardƒ±cƒ±llƒ±qla yarad"""
    np.random.seed(42)
    
    # ≈ûikay…ôt m…ôtnl…ôri - d…ôqiq 100 giri≈ü
    base_complaint_texts = [
        "Mobil t…ôtbiqd…ô problem var, giri≈ü ed…ô bilmir…ôm",
        "ATM-d…ôn pul √ßƒ±xarmaq m√ºmk√ºn olmur", 
        "Kart komissiyasƒ± √ßox y√ºks…ôkdir",
        "Filial xidm…ôti √ßox yava≈üdƒ±r",
        "Kredit m…ôbl…ôƒüi kifay…ôt etmir",
        "ƒ∞nternet banking i≈ül…ômir",
        "Hesabƒ±mdan s…ôhv m…ôbl…ôƒü silinib",
        "Telefon z…ôngl…ôri √ßox tez-tez g…ôlir",
        "Online √∂d…ôni≈ü sistemi yava≈ü i≈ül…ôyir",
        "Kart bloklanƒ±b, s…ôb…ôbi aydƒ±n deyil"
    ]
    
    text_az = [np.random.choice(base_complaint_texts) for _ in range(100)]
    
    # ≈ûikay…ôt m…ôlumatlarƒ±
    complaint_data = {
        'id': list(range(1, 101)),
        'tarix': pd.date_range(start='2024-01-01', periods=100, freq='D'),
        'musteri_id': np.random.randint(1000, 9999, 100),
        'kanal': np.random.choice(['Mobil T…ôtbiq', 'Filial', 'Z…ông M…ôrk…ôzi', 'Veb Sayt'], 100),
        'kateqoriya': np.random.choice(['Kart', 'ATM', 'Mobil', 'Komissiya', 'Filial', 'Kredit'], 100),
        'metn_az': text_az,
        'ciddilik': np.random.choice(['a≈üaƒüƒ±', 'orta', 'y√ºks…ôk'], 100, p=[0.4, 0.4, 0.2]),
        'status': np.random.choice(['A√ßƒ±q', 'Prosesd…ô', 'Baƒülƒ±'], 100, p=[0.2, 0.3, 0.5]),
        'region': np.random.choice(['Bakƒ±', 'G…ônc…ô', 'Sumqayƒ±t', 'Ming…ô√ßevir', '≈û…ôki'], 100)
    }
    
    # Kredit m…ôlumatlarƒ±
    loan_data = {
        'musteri_id': list(range(1, 201)),
        'yas': np.clip(np.random.normal(40, 12, 200).astype(int), 18, 80),
        'gelir': np.clip(np.random.gamma(2, 1000, 200), 300, 15000),
        'isci_veziyyeti': np.random.choice(['d√∂vl…ôt', 'i≈ü√ßi', 's…ôrb…ôst_i≈ü√ßi', 'i≈üsiz'], 200, p=[0.2, 0.5, 0.2, 0.1]),
        'kredit_reytingi': np.clip(np.random.normal(650, 100, 200).astype(int), 300, 850),
        'kredit_meblegi': np.clip(np.random.gamma(2, 5000, 200), 1000, 100000),
        'borc_gelir_nisbeti': np.clip(np.random.beta(2, 3, 200), 0.05, 0.95),
        'teminat_deyeri': np.random.gamma(1.5, 8000, 200),
        'kredit_teminat_nisbeti': np.clip(np.random.beta(3, 2, 200), 0.1, 0.95),
        'muddet_ay': np.random.randint(6, 120, 200),
        'region': np.random.choice(['Bakƒ±', 'G…ônc…ô', 'Sumqayƒ±t', 'Ming…ô√ßevir', '≈û…ôki'], 200)
    }
    
    return pd.DataFrame(complaint_data), pd.DataFrame(loan_data).head(100)

class ImprovedGeminiAPI:
    """T…ôkmill…ô≈üdirilmi≈ü Gemini API wrapper-i"""
    
    def __init__(self, api_key=None):
        self.api_key = api_key
        self.model = None
        self.initialized = False
        
        if api_key and GEMINI_AVAILABLE:
            try:
                genai.configure(api_key=api_key)
                self.model = genai.GenerativeModel('gemini-2.5-flash')
                self.initialized = True
                st.success("Gemini API uƒüurla ba≈üladƒ±ldƒ±!")
            except Exception as e:
                st.error(f"Gemini API ba≈üladƒ±lmasƒ±nda x…ôta: {str(e)}")
                self.initialized = False
        elif not GEMINI_AVAILABLE:
            st.info("Gemini API m√∂vcud deyil - mock cavablar istifad…ô edilir")
    
    def generate_response(self, prompt, language='az', max_retries=3):
        """Cavab yarad"""
        if not self.initialized or not self.model:
            return self._mock_response(prompt, language)
        
        for attempt in range(max_retries):
            try:
                lang_instruction = "Cavabƒ± Az…ôrbaycan dilind…ô verin" if language == 'az' else "Provide response in English"
                full_prompt = f"{lang_instruction}. {prompt}"
                
                response = self.model.generate_content(full_prompt)
                
                if response.text:
                    return response.text
                else:
                    raise Exception("API-dan bo≈ü cavab")
                    
            except Exception as e:
                if attempt == max_retries - 1:
                    st.warning(f"API √ßaƒüƒ±rƒ±≈üƒ± {max_retries} c…ôhdd…ôn sonra uƒüursuz: {str(e)}")
                    return self._mock_response(prompt, language)
                continue
        
        return self._mock_response(prompt, language)
    
    def _mock_response(self, prompt, language='az'):
        """ABB Bank m…ôlumatlarƒ± il…ô mock cavab sistemi"""
        prompt_lower = prompt.lower()
        
        if any(word in prompt_lower for word in ['complaint', '≈üikay…ôt', 'problem']):
            return """H√∂rm…ôtli m√º≈üt…ôri,

ABB Bank olaraq ≈üikay…ôtinizi q…ôbul edirik v…ô d…ôrhal ara≈üdƒ±rmaya ba≈ülayƒ±rƒ±q. Bizim √º√ß√ºn m√º≈üt…ôri m…ômnuniyy…ôti prioritetdir.

∆èlaq…ô m…ôlumatlarƒ±mƒ±z:
‚Ä¢ Z…ông M…ôrk…ôzi: 937
‚Ä¢ E-po√ßt: info@abb-bank.az
‚Ä¢ 24/7 online xidm…ôt

2-3 i≈ü g√ºn√º …ôrzind…ô sizinl…ô …ôlaq…ô saxlayacaƒüƒ±q.

H√∂rm…ôtl…ô,
ABB Bank M√º≈üt…ôri Xidm…ôtl…ôri"""
        
        elif any(word in prompt_lower for word in ['credit', 'kredit', 'loan', 'risk']):
            return """ABB Bank kredit analizi n…ôtic…ôsind…ô:

M√º≈üt…ôrinin √∂d…ôm…ô qabiliyy…ôti orta s…ôviyy…ôd…ô qiym…ôtl…ôndirilir. 

∆èlav…ô m…ôlumatlar:
‚Ä¢ Z…ông M…ôrk…ôzi: 937
‚Ä¢ E-po√ßt: info@abb-bank.az
‚Ä¢ Kredit departamenti il…ô …ôlav…ô m…ôsl…ôh…ôtl…ô≈üm…ô t√∂vsiy…ô olunur"""
        
        else:
            return """ABB Bank olaraq sorƒüunuz …ôsasƒ±nda analiz aparƒ±lmƒ±≈ü v…ô m√ºvafiq t√∂vsiy…ôl…ôr hazƒ±rlanmƒ±≈üdƒ±r.

∆èlaq…ô m…ôlumatlarƒ±mƒ±z:
‚Ä¢ Z…ông M…ôrk…ôzi: 937  
‚Ä¢ E-po√ßt: info@abb-bank.az

∆èlav…ô m…ôlumat √º√ß√ºn m√ºvafiq departamentl…ô …ôlaq…ô saxlayƒ±n."""

def improved_sidebar_navigation():
    """T…ôkmill…ô≈üdirilmi≈ü yan panel"""
    st.sidebar.markdown("### üè¶ Bank360 Analitika")
    
    # Dil se√ßici
    language_options = {'Az…ôrbaycan': 'az', 'English': 'en'}
    current_lang_key = 'Az…ôrbaycan' if st.session_state.language == 'az' else 'English'
    
    selected_language = st.sidebar.selectbox(
        "Dil / Language",
        list(language_options.keys()),
        index=list(language_options.keys()).index(current_lang_key)
    )
    st.session_state.language = language_options[selected_language]
    
    # API Key idar…ôetm…ôsi
    st.sidebar.markdown("---")
    st.sidebar.subheader("‚öôÔ∏è T…ônziml…ôm…ôl…ôr")
    
    api_key = st.sidebar.text_input(
        "Gemini API A√ßarƒ±",
        type="password",
        value=st.session_state.gemini_api_key,
        help="AI x√ºsusiyy…ôtl…ôri √º√ß√ºn Google Gemini API a√ßarƒ±nƒ±zƒ± daxil edin"
    )
    
    if api_key != st.session_state.gemini_api_key:
        st.session_state.gemini_api_key = api_key
        if api_key:
            st.sidebar.success("API a√ßarƒ± yenil…ôndi!")
    
    # Naviqasiya menyusu - sad…ôc…ô 4 s…ôhif…ô
    st.sidebar.markdown("---")
    st.sidebar.subheader("üìä Naviqasiya")
    
    pages = ['Ana S…ôhif…ô', '≈ûikay…ôtl…ôr', 'Kredit Riski', 'Bilik Axtarƒ±≈üƒ±']
    
    selected_page = st.sidebar.radio(
        "S…ôhif…ô Se√ßin",
        pages
    )
    
    return selected_page

@st.cache_data
def safe_sentiment_analysis(texts):
    """Sentiment analizi"""
    results = []
    positive_words = ['yax≈üƒ±', '…ôla', 'm√ºk…ômm…ôl', 'razƒ±yam', 't…ô≈ü…ôkk√ºr', 'g√∂z…ôl']
    negative_words = ['pis', 's…ôhv', 'problem', '≈üikay…ôt', 'narazƒ±yam', 'yava≈ü']
    
    for text in texts:
        try:
            text_lower = str(text).lower()
            
            pos_count = sum(1 for word in positive_words if word in text_lower)
            neg_count = sum(1 for word in negative_words if word in text_lower)
            
            if pos_count > neg_count:
                sentiment = 'm√ºsb…ôt'
                score = 0.7
            elif neg_count > pos_count:
                sentiment = 'm…ônfi'
                score = 0.3
            else:
                sentiment = 'neytral'
                score = 0.5
            
            results.append({
                'sentiment': sentiment,
                'score': score,
                'confidence': 0.8
            })
        except:
            results.append({
                'sentiment': 'neytral',
                'score': 0.5,
                'confidence': 0.5
            })
    
    return results

def home_page(gemini_api):
    """Ana s…ôhif…ô"""
    st.title("üè¶ Bank360 Analitika ƒ∞dar…ô Paneli")
    st.markdown("---")
    
    try:
        complaint_df, loan_df = generate_sample_data_fixed()
    except Exception as e:
        st.error(f"M…ôlumat y√ºkl…ônm…ôsind…ô x…ôta: {str(e)}")
        return
    
    # KPI s…ôtriri
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("√úmumi ≈ûikay…ôtl…ôr", len(complaint_df), delta=f"+{np.random.randint(5, 15)}")
    
    with col2:
        csat_score = np.random.uniform(3.8, 4.5)
        st.metric("CSAT Balƒ±", f"{csat_score:.1f}/5.0", delta=f"+{np.random.uniform(0.1, 0.3):.1f}")
    
    with col3:
        high_severity = len(complaint_df[complaint_df['ciddilik'] == 'y√ºks…ôk'])
        st.metric("Y√ºks…ôk Ciddiyy…ôt", high_severity, delta=f"-{np.random.randint(1, 3)}")
    
    with col4:
        avg_pd = loan_df['borc_gelir_nisbeti'].mean() * 0.25
        st.metric("Orta PD", f"{avg_pd:.1%}", delta=f"{np.random.uniform(-0.01, 0.01):+.1%}")
    
    st.markdown("---")
    
    # Qrafikl…ôr
    col1, col2 = st.columns(2)
    
    with col1:
        category_counts = complaint_df['kateqoriya'].value_counts()
        fig = px.pie(
            values=category_counts.values,
            names=category_counts.index,
            title="≈ûikay…ôt Kateqoriyalarƒ±"
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        daily_complaints = complaint_df.groupby(complaint_df['tarix'].dt.date).size()
        fig = px.line(
            x=daily_complaints.index,
            y=daily_complaints.values,
            title="G√ºnd…ôlik ≈ûikay…ôt Tendensiyalarƒ±"
        )
        st.plotly_chart(fig, use_container_width=True)

def complaints_page(gemini_api):
    """≈ûikay…ôtl…ôr s…ôhif…ôsi"""
    st.title("≈ûikay…ôtl…ôr v…ô R…ôy T…ôhlili")
    st.markdown("---")
    
    try:
        complaint_df, _ = generate_sample_data_fixed()
    except Exception as e:
        st.error(f"M…ôlumat y√ºkl…ônm…ôsind…ô x…ôta: {str(e)}")
        return
    
    # M…ôlumat baxƒ±≈üƒ±
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("√úmumi Qeydl…ôr", len(complaint_df))
    with col2:
        high_sev = len(complaint_df[complaint_df['ciddilik'] == 'y√ºks…ôk'])
        st.metric("Y√ºks…ôk Ciddiyy…ôt", high_sev)
    with col3:
        open_cases = len(complaint_df[complaint_df['status'] == 'A√ßƒ±q'])
        st.metric("A√ßƒ±q ƒ∞≈ül…ôr", open_cases)
    with col4:
        avg_days = np.random.randint(2, 7)
        st.metric("Orta H…ôll (g√ºn)", avg_days)
    
    # T…ôhlil tablarƒ±
    tab1, tab2, tab3 = st.tabs(["Sentiment T…ôhlili", "Kateqoriya T…ôhlili", "Cavab Yaradƒ±cƒ±sƒ±"])
    
    with tab1:
        st.subheader("Sentiment T…ôhlili")
        
        if st.button("Sentimentl…ôri T…ôhlil Et"):
            sample_texts = complaint_df['metn_az'].head(20).tolist()
            sentiments = safe_sentiment_analysis(sample_texts)
            
            if sentiments:
                sentiment_labels = [s['sentiment'] for s in sentiments]
                
                sentiment_counts = pd.Series(sentiment_labels).value_counts()
                fig = px.pie(
                    values=sentiment_counts.values,
                    names=sentiment_counts.index,
                    title="Sentiment Paylanmasƒ±"
                )
                st.plotly_chart(fig, use_container_width=True)
    
    with tab2:
        st.subheader("Kateqoriya T…ôhlili")
        
        category_counts = complaint_df['kateqoriya'].value_counts()
        
        fig = px.bar(
            x=category_counts.values,
            y=category_counts.index,
            orientation='h',
            title="Kateqoriyalara g√∂r…ô ≈ûikay…ôtl…ôr"
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with tab3:
        st.subheader("AI Cavab Yaradƒ±cƒ±sƒ±")
        
        complaint_options = complaint_df['metn_az'].head(5).tolist()
        
        selected_complaint = st.selectbox(
            "Cavab yaratmaq √º√ß√ºn ≈üikay…ôt se√ßin:",
            complaint_options
        )
        
        if st.button("Pe≈ü…ôkar Cavab Yarat"):
            response = gemini_api.generate_response(
                f"""ABB Bank olaraq bu m√º≈üt…ôri ≈üikay…ôtin…ô pe≈ü…ôkar cavab yaradƒ±n:
                
                ≈ûikay…ôt: {selected_complaint}
                
                Cavab h√∂rm…ôtli, pe≈ü…ôkar v…ô h…ôllledici olsun."""
            )
            st.write("**Yaradƒ±lan Cavab:**")
            st.write(response)

def credit_risk_page(gemini_api):
    """Kredit riski s…ôhif…ôsi"""
    st.title("Kredit Riski v…ô G√∂zl…ônil…ôn ƒ∞tki T…ôhlili")
    st.markdown("---")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**≈û…ôxsi M…ôlumatlar**")
        age = st.slider("Ya≈ü", 18, 80, 35)
        income = st.number_input("Aylƒ±q G…ôlir (AZN)", 300.0, 15000.0, 1500.0)
        employment = st.selectbox("ƒ∞≈ü V…ôziyy…ôti", ['d√∂vl…ôt', 'i≈ü√ßi', 's…ôrb…ôst_i≈ü√ßi', 'i≈üsiz'])
        credit_score = st.slider("Kredit Reytinqi", 300, 850, 650)
    
    with col2:
        st.write("**Kredit M…ôlumatlarƒ±**")
        loan_amount = st.number_input("Kredit M…ôbl…ôƒüi (AZN)", 1000.0, 100000.0, 25000.0)
        debt_to_income = st.slider("Borc-G…ôlir Nisb…ôti", 0.0, 1.0, 0.3)
        collateral_value = st.number_input("T…ôminat D…ôy…ôri (AZN)", 0.0, 200000.0, 30000.0)
        loan_to_value = st.slider("Kredit-T…ôminat Nisb…ôti", 0.0, 1.0, 0.8)
    
    if st.button("Risk Metrikl…ôr Hesabla"):
        # Sad…ôl…ô≈üdirilmi≈ü PD hesablama
        base_pd = 0.15
        
        # Ya≈ü faktoru
        age_factor = 0.03 if age < 25 or age > 65 else (-0.02 if 35 <= age <= 50 else 0)
        
        # G…ôlir faktoru
        income_factor = -0.00002 * income if income > 0 else 0.1
        
        # ƒ∞≈ü faktoru
        emp_factors = {'d√∂vl…ôt': -0.03, 'i≈ü√ßi': -0.01, 's…ôrb…ôst_i≈ü√ßi': 0.02, 'i≈üsiz': 0.15}
        employment_factor = emp_factors.get(employment, 0)
        
        # Kredit reytinq faktoru
        credit_factor = -0.0002 * (credit_score - 600)
        
        pd_score = max(0.01, min(0.95, base_pd + age_factor + income_factor + employment_factor + credit_factor))
        
        # LGD hesabla
        lgd = 0.2 if collateral_value >= loan_amount else max(0.3, 0.8 - (collateral_value/loan_amount * 0.5))
        
        # EAD v…ô Expected Loss
        ead = loan_amount * 0.85
        expected_loss = pd_score * lgd * ead
        
        # N…ôtic…ôl…ôri g√∂st…ôr
        st.markdown("---")
        st.subheader("Risk Qiym…ôtl…ôndirm…ô N…ôtic…ôl…ôri")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            risk_level = "Y√ºks…ôk" if pd_score > 0.2 else "Orta" if pd_score > 0.1 else "A≈üaƒüƒ±"
            st.metric("Defolt Ehtimalƒ± (PD)", f"{pd_score:.2%}")
            st.write(f"**Risk S…ôviyy…ôsi:** {risk_level}")
        
        with col2:
            st.metric("Defoltda ƒ∞tki (LGD)", f"{lgd:.2%}")
            st.metric("Defoltda M…ôruz Qalma (EAD)", f"{ead:,.0f} AZN")
        
        with col3:
            st.metric("G√∂zl…ônil…ôn ƒ∞tki (EL)", f"{expected_loss:,.0f} AZN")

def knowledge_search_page(gemini_api):
    """Bilik axtarƒ±≈üƒ± s…ôhif…ôsi"""
    st.title("Bilik Axtarƒ±≈üƒ± v…ô RAG Sistemi")
    st.markdown("---")
    
    # Bilik bazasƒ±nƒ± ba≈ülat
    if 'kb_docs' not in st.session_state:
        st.session_state.kb_docs = [
            {
                'title': 'ABB Bank Kredit Kartƒ± Qaydalari',
                'content': 'ABB Bank kredit kartƒ±nƒ±n istifad…ô qaydalari: Aylƒ±q komissiya 2 AZN, naƒüd pul √ßƒ±xarma 1.5%, minimum √∂d…ôni≈ü 5%. ∆èlav…ô m…ôlumat √º√ß√ºn: 937 v…ô ya info@abb-bank.az',
                'category': 'm…ôhsullar'
            },
            {
                'title': 'ABB Mobil Banking Xidm…ôtl…ôri',
                'content': 'ABB mobil t…ôtbiq vasit…ôsil…ô: pul k√∂√ß√ºrm…ôl…ôri, hesab yoxlanmasƒ±, kommunal √∂d…ôni≈ül…ôr, kredit √∂d…ôni≈ül…ôri. Texniki d…ôst…ôk: 937, info@abb-bank.az',
                'category': 'r…ôq…ômsal'
            },
            {
                'title': 'ABB Bank Kredit ≈û…ôrtl…ôri',
                'content': 'ABB Bank f…ôrdi kreditl…ôr: minimum g…ôlir 500 AZN, maksimum 50,000 AZN, m√ºdd…ôt 60 aya q…ôd…ôr, faiz 12-18%. M…ôsl…ôh…ôt √º√ß√ºn: 937 v…ô ya info@abb-bank.az',
                'category': 'kreditl…ôr'
            },
            {
                'title': 'ABB Bank ∆èlaq…ô M…ôlumatlarƒ±',
                'content': 'ABB Bank …ôlaq…ô m…ôlumatlarƒ±: Z…ông M…ôrk…ôzi 937 (24/7), E-po√ßt info@abb-bank.az, Online banking, mobil t…ôtbiq.',
                'category': '√ºmumi'
            }
        ]
    
    # Axtarƒ±≈ü interfeysi
    st.subheader("Bilik Axtarƒ±≈üƒ±")
    
    query = st.text_input(
        "Bank xidm…ôtl…ôri haqqƒ±nda sual verin:",
        placeholder="Kredit kartƒ±nƒ±n komissiyasƒ± n…ô q…ôd…ôrdir?"
    )
    
    if query:
        # Sad…ô axtarƒ±≈ü
        relevant_docs = search_documents(st.session_state.kb_docs, query)
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.write("**AI Cavabƒ±:**")
            
            if relevant_docs:
                context = " ".join([doc['content'] for doc in relevant_docs[:2]])
                
                answer_prompt = f"""
                ABB Bank bilik bazasƒ± …ôsasƒ±nda bu suala cavab verin:
                
                Kontekst: {context}
                Sual: {query}
                
                ABB Bank adƒ±ndan faydalƒ± v…ô d…ôqiq cavab verin.
                """
                
                answer = gemini_api.generate_response(answer_prompt, st.session_state.language)
                st.write(answer)
            else:
                st.write("T…ô…ôss√ºf ki, sualƒ±nƒ±z √º√ß√ºn m√ºvafiq m…ôlumat tapa bilm…ôdim.")
        
        with col2:
            st.write("**M√ºvafiq S…ôn…ôdl…ôr:**")
            
            for doc in relevant_docs[:3]:
                with st.expander(f"{doc['title']}"):
                    st.write(doc['content'][:200] + "...")

def search_documents(docs, query):
    """Sad…ô s…ôn…ôd axtarƒ±≈ü t…ôtbiqi"""
    query_words = query.lower().split()
    
    scored_docs = []
    for doc in docs:
        content_lower = doc['content'].lower()
        title_lower = doc['title'].lower()
        
        content_score = sum(1 for word in query_words if word in content_lower)
        title_score = sum(2 for word in query_words if word in title_lower)
        
        total_score = content_score + title_score
        
        if total_score > 0:
            doc_copy = doc.copy()
            doc_copy['score'] = total_score / len(query_words)
            scored_docs.append(doc_copy)
    
    return sorted(scored_docs, key=lambda x: x['score'], reverse=True)

def main():
    """∆èsas t…ôtbiq"""
    initialize_session_state()
    
    # API a√ßarƒ±nƒ± y√ºkl…ôm…ôy…ô √ßalƒ±≈ü
    if not st.session_state.gemini_api_key and not st.session_state.initialized:
        try:
            st.session_state.gemini_api_key = st.secrets.get("GEMINI_API_KEY", "")
        except:
            pass
        st.session_state.initialized = True
    
    # API-ni ba≈ülat
    gemini_api = ImprovedGeminiAPI(st.session_state.gemini_api_key)
    
    # Naviqasiya
    selected_page = improved_sidebar_navigation()
    
    # M√ºvafiq s…ôhif…ôy…ô y√∂nl…ôndir
    if selected_page == 'Ana S…ôhif…ô':
        home_page(gemini_api)
    elif selected_page == '≈ûikay…ôtl…ôr':
        complaints_page(gemini_api)
    elif selected_page == 'Kredit Riski':
        credit_risk_page(gemini_api)
    elif selected_page == 'Bilik Axtarƒ±≈üƒ±':
        knowledge_search_page(gemini_api)

if __name__ == "__main__":
    main()
