# Bank360 - D√ºz…ôldilmi≈ü v…ô Az…ôrbaycan dilind…ô
# Bu fayl …ôsas probleml…ôrin h…ôllini ehtiva edir

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
import io
import base64
from typing import List, Dict, Any, Optional
import re
import warnings
warnings.filterwarnings('ignore')

# T…ôhl√ºk…ôsiz import-lar
try:
    from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
    from sklearn.cluster import KMeans
    from sklearn.metrics import roc_curve, auc, precision_recall_curve
    from sklearn.decomposition import LatentDirichletAllocation
    from sklearn.model_selection import train_test_split
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.preprocessing import StandardScaler
    SKLEARN_AVAILABLE = True
except ImportError:
    SKLEARN_AVAILABLE = False
    st.error("scikit-learn qura≈üdƒ±rƒ±lmayƒ±b. √áalƒ±≈üdƒ±rƒ±n: pip install scikit-learn")

try:
    import scipy.stats as stats
    SCIPY_AVAILABLE = True
except ImportError:
    SCIPY_AVAILABLE = False
    st.error("scipy qura≈üdƒ±rƒ±lmayƒ±b. √áalƒ±≈üdƒ±rƒ±n: pip install scipy")

try:
    import google.generativeai as genai
    GEMINI_AVAILABLE = True
except ImportError:
    GEMINI_AVAILABLE = False
    st.warning("Google Gemini API m√∂vcud deyil. Qura≈üdƒ±rƒ±n: pip install google-generativeai")

# Streamlit s…ôhif…ôni konfiqurasiya et
st.set_page_config(
    page_title="Bank360 Analitika",
    page_icon="üè¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

def initialize_session_state():
    """Session state-i d√ºzg√ºn default-larla ba≈ülat"""
    defaults = {
        'language': 'az',
        'complaint_data': None,
        'loan_data': None,
        'customer_data': None,
        'gemini_api_key': "",
        'knowledge_base': None,
        'initialized': False
    }
    
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value

def safe_execute(func, *args, **kwargs):
    """Funksiyalarƒ± t…ôhl√ºk…ôsiz ≈ü…ôkild…ô icra et"""
    try:
        return func(*args, **kwargs)
    except Exception as e:
        st.error(f"{func.__name__} funksiyasƒ±nda x…ôta: {str(e)}")
        return None

@st.cache_data
def generate_sample_data_fixed():
    """N√ºmun…ô m…ôlumatlarƒ± d√ºzg√ºn x…ôta idar…ôetm…ôsi v…ô ardƒ±cƒ±llƒ±qla yarad"""
    np.random.seed(42)  # T…ôkrarlanabilirlik √º√ß√ºn
    
    # ≈ûikay…ôt m…ôtnl…ôri - d…ôqiq 100 giri≈ü
    base_complaint_texts = [
        "Mobil t…ôtbiqd…ô problem var, giri≈ü ed…ô bilmir…ôm",
        "ATM-d…ôn pul √ßƒ±xarmaq m√ºmk√ºn olmur", 
        "Kart komissiyasƒ± √ßox y√ºks…ôkdir",
        "Filial xidm…ôti √ßox yava≈üdƒ±r",
        "Kredit m…ôbl…ôƒüi kifay…ôt etmir",
        "ƒ∞nternet banking i≈ül…ômir",
        "Hesabƒ±mdan s…ôhv m…ôbl…ôƒü silinib",
        "Telefon z…ôngl…ôr √ßox tez-tez g…ôlir",
        "Online √∂d…ôni≈ü sistemi yava≈ü i≈ül…ôyir",
        "Kart bloklanƒ±b, s…ôb…ôbi aydƒ±n deyil"
    ]
    
    # D…ôqiq 100 ≈üikay…ôt m…ôtni yarad
    text_az = [np.random.choice(base_complaint_texts) for _ in range(100)]
    
    # Ardƒ±cƒ±l tipl…ôrl…ô ≈üikay…ôt m…ôlumatlarƒ±
    complaint_data = {
        'id': list(range(1, 101)),
        'tarix': pd.date_range(start='2024-01-01', periods=100, freq='D'),
        'musteri_id': np.random.randint(1000, 9999, 100),
        'kanal': np.random.choice(['Mobil T…ôtbiq', 'Filial', 'Z…ông M…ôrk…ôzi', 'Veb Sayt'], 100),
        'kateqoriya': np.random.choice(['Kart', 'ATM', 'Mobil', 'Komissiya', 'Filial', 'Kredit'], 100),
        'metn_az': text_az,
        'ciddilik': np.random.choice(['a≈üaƒüƒ±', 'orta', 'y√ºks…ôk'], 100, p=[0.4, 0.4, 0.2]),
        'status': np.random.choice(['A√ßƒ±q', 'Prosesd…ô', 'Baƒülƒ±'], 100, p=[0.2, 0.3, 0.5]),
        'region': np.random.choice(['Bakƒ±', 'G…ônc…ô', 'Sumqayƒ±t', 'Ming…ô√ßevir', '≈û…ôki'], 100)
    }
    
    # D√ºzg√ºn m…ôlumat tipl…ôri il…ô kredit m…ôlumatlarƒ±
    loan_data = {
        'musteri_id': list(range(1, 201)),
        'yas': np.clip(np.random.normal(40, 12, 200).astype(int), 18, 80),
        'gelir': np.clip(np.random.gamma(2, 1000, 200), 300, 15000),
        'isci_veziyyeti': np.random.choice(['d√∂vl…ôt', 'i≈ü√ßi', 's…ôrb…ôst_i≈ü√ßi', 'i≈üsiz'], 200, p=[0.2, 0.5, 0.2, 0.1]),
        'kredit_reytingi': np.clip(np.random.normal(650, 100, 200).astype(int), 300, 850),
        'kredit_meblegi': np.clip(np.random.gamma(2, 5000, 200), 1000, 100000),
        'borc_gelir_nisbeti': np.clip(np.random.beta(2, 3, 200), 0.05, 0.95),
        'teminat_deyeri': np.random.gamma(1.5, 8000, 200),
        'kredit_teminat_nisbeti': np.clip(np.random.beta(3, 2, 200), 0.1, 0.95),
        'muddet_ay': np.random.randint(6, 120, 200),
        'region': np.random.choice(['Bakƒ±', 'G…ônc…ô', 'Sumqayƒ±t', 'Ming…ô√ßevir', '≈û…ôki'], 200)
    }
    
    # M√º≈üt…ôri m…ôlumatlarƒ±
    customer_data = {
        'musteri_id': list(range(1, 301)),
        'yas': np.clip(np.random.normal(38, 15, 300).astype(int), 18, 80),
        'gelir': np.clip(np.random.gamma(2, 1200, 300), 300, 10000),
        'muddet_ay': np.random.randint(1, 60, 300),
        'mehsul_sayi': np.clip(np.random.poisson(2, 300) + 1, 1, 6),
        'region': np.random.choice(['Bakƒ±', 'G…ônc…ô', 'Sumqayƒ±t', 'Ming…ô√ßevir', '≈û…ôki'], 300),
        'son_tranzaksiya_gunleri': np.random.randint(1, 90, 300),
        'reqemsal_qebul': np.random.choice(['Y√ºks…ôk', 'Orta', 'A≈üaƒüƒ±'], 300, p=[0.3, 0.5, 0.2])
    }
    
    return (
        pd.DataFrame(complaint_data),
        pd.DataFrame(loan_data).head(100),
        pd.DataFrame(customer_data).head(100)
    )

class ImprovedGeminiAPI:
    """T…ôkmill…ô≈üdirilmi≈ü Gemini API wrapper-i"""
    
    def __init__(self, api_key: Optional[str] = None):
        self.api_key = api_key
        self.model = None
        self.initialized = False
        
        if api_key and GEMINI_AVAILABLE:
            try:
                genai.configure(api_key=api_key)
                self.model = genai.GenerativeModel('gemini-2.5-flash')
                self.initialized = True
                st.success("Gemini API uƒüurla ba≈üladƒ±ldƒ±!")
            except Exception as e:
                st.error(f"Gemini API ba≈üladƒ±lmasƒ±nda x…ôta: {str(e)}")
                self.initialized = False
        elif not GEMINI_AVAILABLE:
            st.info("Gemini API m√∂vcud deyil - mock cavablar istifad…ô edilir")
    
    def generate_response(self, prompt: str, language: str = 'az', max_retries: int = 3) -> str:
        """T…ôkrar c…ôhd m…ôntiqi v…ô d√ºzg√ºn x…ôta idar…ôetm…ôsi il…ô cavab yarad"""
        if not self.initialized or not self.model:
            return self._mock_response(prompt, language)
        
        for attempt in range(max_retries):
            try:
                lang_instruction = "Cavabƒ± Az…ôrbaycan dilind…ô verin" if language == 'az' else "Provide response in English"
                full_prompt = f"{lang_instruction}. {prompt}"
                
                response = self.model.generate_content(full_prompt)
                
                if response.text:
                    return response.text
                else:
                    raise Exception("API-dan bo≈ü cavab")
                    
            except Exception as e:
                if attempt == max_retries - 1:
                    st.warning(f"API √ßaƒüƒ±rƒ±≈üƒ± {max_retries} c…ôhdd…ôn sonra uƒüursuz: {str(e)}")
                    return self._mock_response(prompt, language)
                continue
        
        return self._mock_response(prompt, language)
    
    def _mock_response(self, prompt: str, language: str = 'az') -> str:
        """ABB Bank m…ôlumatlarƒ± il…ô t…ôkmill…ô≈üdirilmi≈ü mock cavab sistemi"""
        prompt_lower = prompt.lower()
        
        # ≈ûikay…ôt cavablarƒ±
        if any(word in prompt_lower for word in ['complaint', '≈üikay…ôt', 'problem']):
            return """H√∂rm…ôtli m√º≈üt…ôri,

ABB Bank olaraq ≈üikay…ôtinizi q…ôbul edirik v…ô d…ôrhal ara≈üdƒ±rmaya ba≈ülayƒ±rƒ±q. Bizim √º√ß√ºn m√º≈üt…ôri m…ômnuniyy…ôti prioritetdir.

∆èlaq…ô m…ôlumatlarƒ±mƒ±z:
‚Ä¢ Z…ông M…ôrk…ôzi: 937
‚Ä¢ E-po√ßt: info@abb-bank.az
‚Ä¢ 24/7 online xidm…ôt

2-3 i≈ü g√ºn√º …ôrzind…ô sizinl…ô …ôlaq…ô saxlayacaƒüƒ±q. S…ôbiriniz √º√ß√ºn t…ô≈ü…ôkk√ºr edirik.

H√∂rm…ôtl…ô,
ABB Bank M√º≈üt…ôri Xidm…ôtl…ôri"""
        
        # Kredit analiz cavablarƒ±
        elif any(word in prompt_lower for word in ['credit', 'kredit', 'loan', 'risk']):
            return """ABB Bank kredit analizi n…ôtic…ôsind…ô:

M√º≈üt…ôrinin √∂d…ôm…ô qabiliyy…ôti orta s…ôviyy…ôd…ô qiym…ôtl…ôndirilir. 

∆èlav…ô m…ôlumatlar:
‚Ä¢ Z…ông M…ôrk…ôzi: 937
‚Ä¢ E-po√ßt: info@abb-bank.az
‚Ä¢ Kredit departamenti il…ô …ôlav…ô m…ôsl…ôh…ôtl…ô≈üm…ô t√∂vsiy…ô olunur

Risk idar…ôetm…ôsi b√∂lm…ôsi il…ô …ôlaq…ô saxlayƒ±n."""
        
        # Strategiya cavablarƒ±
        elif any(word in prompt_lower for word in ['strategy', 'strategiya', 'recommend', 't√∂vsiy…ô']):
            return """ABB Bank marketinq strategiyasƒ± t√∂vsiy…ôl…ôri:

1) R…ôq…ômsal platformalarƒ± inki≈üaf etdirin
2) M√º≈üt…ôri seqmentl…ôrin…ô uyƒüun m…ôhsullar t…ôklif edin  
3) M√º≈üt…ôri m…ômnuniyy…ôtini artƒ±rmaq √º√ß√ºn xidm…ôt keyfiyy…ôtini yax≈üƒ±la≈üdƒ±rƒ±n
4) √áarpaz satƒ±≈ü imkanlarƒ±ndan istifad…ô edin

∆èlav…ô m…ôlumat √º√ß√ºn:
‚Ä¢ Z…ông M…ôrk…ôzi: 937
‚Ä¢ E-po√ßt: info@abb-bank.az"""
        
        # √úmumi cavab
        else:
            return """ABB Bank olaraq sorƒüunuz …ôsasƒ±nda analiz aparƒ±lmƒ±≈ü v…ô m√ºvafiq t√∂vsiy…ôl…ôr hazƒ±rlanmƒ±≈üdƒ±r.

∆èlaq…ô m…ôlumatlarƒ±mƒ±z:
‚Ä¢ Z…ông M…ôrk…ôzi: 937  
‚Ä¢ E-po√ßt: info@abb-bank.az

∆èlav…ô m…ôlumat √º√ß√ºn m√ºvafiq departamentl…ô …ôlaq…ô saxlayƒ±n."""

def validate_uploaded_file(uploaded_file) -> Optional[pd.DataFrame]:
    """Y√ºkl…ôn…ôn fayllarƒ± t…ôhl√ºk…ôsiz ≈ü…ôkild…ô yoxla v…ô emal et"""
    if uploaded_file is None:
        return None
    
    try:
        file_type = uploaded_file.type
        file_size = uploaded_file.size
        
        # Fayl √∂l√ß√ºs√ºn√º yoxla (maksimum 50MB)
        if file_size > 50 * 1024 * 1024:
            st.error("Fayl √∂l√ß√ºs√º √ßox b√∂y√ºkd√ºr. Maksimum 50MB icaz…ô verilir.")
            return None
        
        # Fayl tipin…ô g√∂r…ô emal et
        if file_type == 'text/csv':
            df = pd.read_csv(uploaded_file, encoding='utf-8')
        elif file_type in ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']:
            df = pd.read_excel(uploaded_file)
        elif file_type == 'application/json':
            df = pd.read_json(uploaded_file)
        else:
            st.error(f"D…ôst…ôkl…ônm…ôy…ôn fayl tipi: {file_type}")
            return None
        
        # ∆èsas yoxlama
        if df.empty:
            st.error("Y√ºkl…ôn…ôn fayl bo≈üdur.")
            return None
        
        if len(df) > 10000:
            st.warning("B√∂y√ºk fayl a≈ükar edildi. ƒ∞lk 10,000 s…ôtir emal edilir.")
            df = df.head(10000)
        
        st.success(f"Fayl uƒüurla y√ºkl…ôndi! {len(df)} s…ôtir, {len(df.columns)} s√ºtun")
        return df
        
    except Exception as e:
        st.error(f"Fayl emalƒ±nda x…ôta: {str(e)}")
        return None

@st.cache_data
def safe_sentiment_analysis(texts: List[str]) -> List[Dict[str, Any]]:
    """Ke≈ül…ôm…ô il…ô t…ôhl√ºk…ôsiz sentiment analizi"""
    if not texts:
        return []
    
    results = []
    positive_words = ['yax≈üƒ±', '…ôla', 'm√ºk…ômm…ôl', 'razƒ±yam', 't…ô≈ü…ôkk√ºr', 'g√∂z…ôl', 'super']
    negative_words = ['pis', 's…ôhv', 'problem', '≈üikay…ôt', 'narazƒ±yam', 'yava≈ü', 'd…ôh≈ü…ôtli', '√ßox_pis']
    severity_words = ['t…ôcili', 'd…ôrhal', 'm√ºtl…ôq', 'vacib', 'ciddi', 'm√ºh√ºm']
    
    for text in texts:
        try:
            text_lower = str(text).lower()
            
            pos_count = sum(1 for word in positive_words if word in text_lower)
            neg_count = sum(1 for word in negative_words if word in text_lower)
            severity_count = sum(1 for word in severity_words if word in text_lower)
            
            if pos_count > neg_count:
                sentiment = 'm√ºsb…ôt'
                score = min(0.9, 0.6 + (pos_count * 0.1))
            elif neg_count > pos_count:
                sentiment = 'm…ônfi'
                score = max(0.1, 0.4 - (neg_count * 0.1))
            else:
                sentiment = 'neytral'
                score = 0.5
            
            if severity_count >= 2 or neg_count >= 3:
                severity = 'y√ºks…ôk'
            elif severity_count == 1 or neg_count >= 2:
                severity = 'orta'
            else:
                severity = 'a≈üaƒüƒ±'
            
            results.append({
                'sentiment': sentiment,
                'score': score,
                'severity': severity,
                'confidence': min(0.95, 0.7 + (pos_count + neg_count) * 0.05)
            })
        except Exception as e:
            # Uƒüursuz analiz √º√ß√ºn neytral qaytƒ±r
            results.append({
                'sentiment': 'neytral',
                'score': 0.5,
                'severity': 'a≈üaƒüƒ±',
                'confidence': 0.5
            })
    
    return results

def improved_sidebar_navigation():
    """T…ôkmill…ô≈üdirilmi≈ü yan panel"""
    st.sidebar.markdown("### üè¶ Bank360 Analitika")
    
    # Dil se√ßici
    language_options = {'Az…ôrbaycan': 'az', 'English': 'en'}
    current_lang_key = 'Az…ôrbaycan' if st.session_state.language == 'az' else 'English'
    
    selected_language = st.sidebar.selectbox(
        "Dil / Language",
        list(language_options.keys()),
        index=list(language_options.keys()).index(current_lang_key)
    )
    st.session_state.language = language_options[selected_language]
    
    # API Key idar…ôetm…ôsi
    st.sidebar.markdown("---")
    st.sidebar.subheader("‚öôÔ∏è T…ônziml…ôm…ôl…ôr")
    
    api_key = st.sidebar.text_input(
        "Gemini API A√ßarƒ±",
        type="password",
        value=st.session_state.gemini_api_key,
        help="AI x√ºsusiyy…ôtl…ôri √º√ß√ºn Google Gemini API a√ßarƒ±nƒ±zƒ± daxil edin",
        placeholder="AIza..."
    )
    
    if api_key != st.session_state.gemini_api_key:
        st.session_state.gemini_api_key = api_key
        if api_key:
            st.sidebar.success("API a√ßarƒ± yenil…ôndi!")
    
    # Naviqasiya menyusu
    st.sidebar.markdown("---")
    st.sidebar.subheader("üìä Naviqasiya")
    
    pages = ['Ana S…ôhif…ô', '≈ûikay…ôtl…ôr', 'Kredit Riski', 'M…ôhsul M…ôlumatlarƒ±', 'Bilik Axtarƒ±≈üƒ±']
    
    selected_page = st.sidebar.radio(
        "S…ôhif…ô Se√ßin",
        pages
    )
    
    # Sistem statusu
    st.sidebar.markdown("---")
    st.sidebar.subheader("üìä Sistem Statusu")
    
    status_items = [
        ("Gemini API", "‚úÖ" if GEMINI_AVAILABLE and st.session_state.gemini_api_key else "‚ùå"),
        ("scikit-learn", "‚úÖ" if SKLEARN_AVAILABLE else "‚ùå"),
        ("scipy", "‚úÖ" if SCIPY_AVAILABLE else "‚ùå")
    ]
    
    for item, status in status_items:
        st.sidebar.text(f"{item}: {status}")
    
    return selected_page

def main():
    """T…ôkmill…ô≈üdirilmi≈ü x…ôta idar…ôetm…ôsi il…ô …ôsas t…ôtbiq"""
    # Session state-i ba≈ülat
    initialize_session_state()
    
    # Secrets-d…ôn API a√ßarƒ±nƒ± y√ºkl…ôm…ôy…ô √ßalƒ±≈ü
    if not st.session_state.gemini_api_key and not st.session_state.initialized:
        try:
            st.session_state.gemini_api_key = st.secrets.get("GEMINI_API_KEY", "")
            if st.session_state.gemini_api_key:
                st.toast("API a√ßarƒ± secrets-d…ôn y√ºkl…ôndi", icon="üîë")
        except:
            pass  # Secrets faylƒ± yoxdur v…ô ya a√ßar tapƒ±lmadƒ±
        
        st.session_state.initialized = True
    
    # API-ni ba≈ülat
    gemini_api = safe_execute(ImprovedGeminiAPI, st.session_state.gemini_api_key)
    if not gemini_api:
        gemini_api = ImprovedGeminiAPI()  # Mock rejim…ô ke√ß
    
    # Naviqasiya
    try:
        selected_page = improved_sidebar_navigation()
        
        # M√ºvafiq s…ôhif…ôy…ô y√∂nl…ôndir
        if selected_page == 'Ana S…ôhif…ô':
            home_page_improved(gemini_api)
        elif selected_page == '≈ûikay…ôtl…ôr':
            complaints_page_improved(gemini_api)
        elif selected_page == 'Kredit Riski':
            credit_risk_page_improved(gemini_api)
        elif selected_page == 'M…ôhsul M…ôlumatlarƒ±':
            product_insights_page_improved(gemini_api)
        elif selected_page == 'Bilik Axtarƒ±≈üƒ±':
            knowledge_search_page_improved(gemini_api)
            
    except Exception as e:
        st.error(f"Naviqasiya x…ôtasƒ±: {str(e)}")
        st.info("Z…ôhm…ôt olmasa s…ôhif…ôni yenil…ôyin v…ô t…ôkrar c…ôhd edin.")

def home_page_improved(gemini_api):
    """T…ôkmill…ô≈üdirilmi≈ü ana s…ôhif…ô"""
    st.title("üè¶ Bank360 Analitika ƒ∞dar…ô Paneli")
    st.markdown("---")
    
    # M…ôlumatlarƒ± t…ôhl√ºk…ôsiz y√ºkl…ô
    try:
        complaint_df, loan_df, customer_df = generate_sample_data_fixed()
    except Exception as e:
        st.error(f"N√ºmun…ô m…ôlumatlarƒ±n y√ºkl…ônm…ôsind…ô x…ôta: {str(e)}")
        return
    
    # KPI s…ôtiri
    col1, col2, col3, col4 = st.columns(4)
    
    try:
        with col1:
            st.metric("√úmumi ≈ûikay…ôtl…ôr", len(complaint_df), delta=f"+{np.random.randint(5, 15)}")
        
        with col2:
            csat_score = np.random.uniform(3.8, 4.5)
            st.metric("CSAT Balƒ±", f"{csat_score:.1f}/5.0", delta=f"+{np.random.uniform(0.1, 0.3):.1f}")
        
        with col3:
            high_severity = len(complaint_df[complaint_df['ciddilik'] == 'y√ºks…ôk']) if 'ciddilik' in complaint_df.columns else 0
            st.metric("Y√ºks…ôk Ciddiyy…ôt", high_severity, delta=f"-{np.random.randint(1, 3)}")
        
        with col4:
            avg_pd = loan_df['borc_gelir_nisbeti'].mean() * 0.25 if 'borc_gelir_nisbeti' in loan_df.columns else 0.15
            st.metric("Orta PD", f"{avg_pd:.1%}", delta=f"{np.random.uniform(-0.01, 0.01):+.1%}")
    
    except Exception as e:
        st.error(f"Metrikl…ôr g√∂st…ôrilm…ôsind…ô x…ôta: {str(e)}")
    
    st.markdown("---")
    
    # Qrafikl…ôr s…ôtiri
    col1, col2 = st.columns(2)
    
    with col1:
        try:
            if 'kateqoriya' in complaint_df.columns:
                category_counts = complaint_df['kateqoriya'].value_counts()
                fig = px.pie(
                    values=category_counts.values,
                    names=category_counts.index,
                    title="≈ûikay…ôt Kateqoriyalarƒ±"
                )
                st.plotly_chart(fig, use_container_width=True)
        except Exception as e:
            st.error(f"Kateqoriya qrafikinin yaradƒ±lmasƒ±nda x…ôta: {str(e)}")
    
    with col2:
        try:
            if 'tarix' in complaint_df.columns:
                daily_complaints = complaint_df.groupby(complaint_df['tarix'].dt.date).size()
                fig = px.line(
                    x=daily_complaints.index,
                    y=daily_complaints.values,
                    title="G√ºnd…ôlik ≈ûikay…ôt Tendensiyalarƒ±"
                )
                st.plotly_chart(fig, use_container_width=True)
        except Exception as e:
            st.error(f"Tendensiya qrafikinin yaradƒ±lmasƒ±nda x…ôta: {str(e)}")
    
    # AI ƒ∞ntellektual t…ôhlil b√∂lm…ôsi
    st.markdown("---")
    st.subheader("ü§ñ AI t…ôr…ôfind…ôn yaradƒ±lan t…ôhill…ôr")
    
    if st.button("Biznes T…ôhlill…ôri Yarad"):
        with st.spinner("M…ôlumatlar t…ôhlil edilir v…ô n…ôtic…ôl…ôr yaradƒ±lƒ±r..."):
            insights_prompt = f"""
            ABB Bank-ƒ±n performans m…ôlumatlarƒ±nƒ± t…ôhlil edin v…ô 3 …ôsas biznes n…ôtic…ôsi verin:
            
            ABB Bank m…ôlumatlarƒ±:
            - Bank adƒ±: ABB Bank  
            - Z…ông M…ôrk…ôzi: 937
            - E-po√ßt: info@abb-bank.az
            
            M…ôlumat X√ºlas…ôsi:
            - √úmumi ≈üikay…ôtl…ôr: {len(complaint_df)}
            - Y√ºks…ôk ciddiyy…ôt ≈üikay…ôtl…ôri: {len(complaint_df[complaint_df['ciddilik'] == 'y√ºks…ôk']) if 'ciddilik' in complaint_df.columns else 0}
            - Orta risk s…ôviyy…ôsi: {avg_pd:.1%}
            - ∆èn √ßox rastlanan ≈üikay…ôt kateqoriyasƒ±: {complaint_df['kateqoriya'].value_counts().index[0] if 'kateqoriya' in complaint_df.columns else 'N/A'}
            
            ABB Bank √º√ß√ºn t…ôkmill…ô≈üdirm…ô t√∂vsiy…ôl…ôrin…ô diqq…ôt yetirin.
            """
            
            insights = gemini_api.generate_response(insights_prompt, st.session_state.language)
            st.write(insights)

def complaints_page_improved(gemini_api):
    """T…ôkmill…ô≈üdirilmi≈ü ≈üikay…ôtl…ôr s…ôhif…ôsi"""
    st.title("≈ûikay…ôtl…ôr v…ô R…ôy T…ôhlili")
    st.markdown("---")
    
    # Fayl y√ºkl…ôm…ô b√∂lm…ôsi
    st.subheader("M…ôlumat Y√ºkl…ôyin")
    uploaded_file = st.file_uploader(
        "CSV, Excel v…ô ya JSON fayl se√ßin",
        type=['csv', 'xlsx', 'json'],
        help="≈ûikay…ôt m…ôlumatlarƒ±nƒ± t…ôhlil √º√ß√ºn y√ºkl…ôyin"
    )
    
    # M…ôlumatlarƒ± y√ºkl…ô
    if uploaded_file is not None:
        data = validate_uploaded_file(uploaded_file)
        if data is not None:
            st.session_state.complaint_data = data
    else:
        # N√ºmun…ô m…ôlumatlar istifad…ô et
        try:
            complaint_df, _, _ = generate_sample_data_fixed()
            st.session_state.complaint_data = complaint_df
            st.info("N√ºmun…ô m…ôlumatlar istifad…ô edilir. H…ôqiqi ≈üikay…ôtl…ôri t…ôhlil etm…ôk √º√ß√ºn √∂z faylƒ±nƒ±zƒ± y√ºkl…ôyin.")
        except Exception as e:
            st.error(f"N√ºmun…ô m…ôlumatlarƒ±n y√ºkl…ônm…ôsind…ô x…ôta: {str(e)}")
            return
    
    data = st.session_state.complaint_data
    
    if data is None or data.empty:
        st.warning("M…ôlumat yoxdur. Z…ôhm…ôt olmasa d√ºzg√ºn fayl y√ºkl…ôyin.")
        return
    
    # M…ôlumat baxƒ±≈üƒ±
    col1, col2, col3, col4 = st.columns(4)
    
    try:
        with col1:
            st.metric("√úmumi Qeydl…ôr", len(data))
        
        with col2:
            high_sev = len(data[data['ciddilik'] == 'y√ºks…ôk']) if 'ciddilik' in data.columns else 0
            st.metric("Y√ºks…ôk Ciddiyy…ôt", high_sev)
        
        with col3:
            open_cases = len(data[data['status'] == 'A√ßƒ±q']) if 'status' in data.columns else 0
            st.metric("A√ßƒ±q ƒ∞≈ül…ôr", open_cases)
        
        with col4:
            avg_days = np.random.randint(2, 7)  # Mock h…ôll vaxtƒ±
            st.metric("Orta H…ôll (g√ºn)", avg_days)
    
    except Exception as e:
        st.error(f"Metrikl…ôr hesablanmasƒ±nda x…ôta: {str(e)}")
    
    # T…ôhlil tab-larƒ±
    tab1, tab2, tab3, tab4 = st.tabs([
        "Sentiment T…ôhlili", 
        "Kateqoriya T…ôhlili", 
        "Cavab Yaradƒ±cƒ±sƒ±", 
        "Tendensiyalar v…ô N√ºmun…ôl…ôr"
    ])
    
    with tab1:
        st.subheader("Sentiment T…ôhlili")
        
        if 'metn_az' in data.columns:
            try:
                sample_size = min(50, len(data))
                sample_texts = data['metn_az'].dropna().head(sample_size).tolist()
                
                if st.button("Sentimentl…ôri T…ôhlil Et", key="sentiment_btn"):
                    with st.spinner("Sentimentl…ôr t…ôhlil edilir..."):
                        sentiments = safe_sentiment_analysis(sample_texts)
                        
                        if sentiments:
                            sentiment_labels = [s['sentiment'] for s in sentiments]
                            severity_labels = [s['severity'] for s in sentiments]
                            
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                sentiment_counts = pd.Series(sentiment_labels).value_counts()
                                fig = px.pie(
                                    values=sentiment_counts.values,
                                    names=sentiment_counts.index,
                                    title="Sentiment Paylanmasƒ±"
                                )
                                st.plotly_chart(fig, use_container_width=True)
                            
                            with col2:
                                severity_counts = pd.Series(severity_labels).value_counts()
                                colors = {'y√ºks…ôk': 'red', 'orta': 'orange', 'a≈üaƒüƒ±': 'green'}
                                fig = px.bar(
                                    x=severity_counts.index,
                                    y=severity_counts.values,
                                    title="Ciddiyy…ôt Paylanmasƒ±",
                                    color=severity_counts.index,
                                    color_discrete_map=colors
                                )
                                st.plotly_chart(fig, use_container_width=True)
                        else:
                            st.warning("Sentimentl…ôr t…ôhlil edil…ô bilm…ôdi")
            except Exception as e:
                st.error(f"Sentiment t…ôhlilind…ô x…ôta: {str(e)}")
        else:
            st.warning("Sentiment t…ôhlili √º√ß√ºn m…ôtn s√ºtunu tapƒ±lmadƒ±")
    
    with tab2:
        st.subheader("Kateqoriya T…ôhlili")
        
        if 'kateqoriya' in data.columns:
            try:
                category_counts = data['kateqoriya'].value_counts()
                
                col1, col2 = st.columns(2)
                
                with col1:
                    fig = px.bar(
                        x=category_counts.values,
                        y=category_counts.index,
                        orientation='h',
                        title="Kateqoriyalara g√∂r…ô ≈ûikay…ôtl…ôr"
                    )
                    st.plotly_chart(fig, use_container_width=True)
                
                with col2:
                    if 'ciddilik' in data.columns:
                        severity_by_cat = pd.crosstab(data['kateqoriya'], data['ciddilik'])
                        fig = px.bar(
                            severity_by_cat,
                            title="Kateqoriyalara g√∂r…ô Ciddiyy…ôt Paylanmasƒ±",
                            barmode='stack'
                        )
                        st.plotly_chart(fig, use_container_width=True)
            
            except Exception as e:
                st.error(f"Kateqoriya t…ôhlilind…ô x…ôta: {str(e)}")
        else:
            st.warning("Kateqoriya s√ºtunu tapƒ±lmadƒ±")
    
    with tab3:
        st.subheader("AI Cavab Yaradƒ±cƒ±sƒ±")
        
        if 'metn_az' in data.columns:
            complaint_options = data['metn_az'].dropna().head(10).tolist()
            
            if complaint_options:
                selected_complaint = st.selectbox(
                    "Cavab yaratmaq √º√ß√ºn ≈üikay…ôt se√ßin:",
                    complaint_options,
                    key="response_complaint"
                )
                
                if st.button("Pe≈ü…ôkar Cavab Yarat", key="generate_response_btn"):
                    with st.spinner("Cavab yaradƒ±lƒ±r..."):
                        try:
                            response = gemini_api.generate_response(
                                f"""ABB Bank olaraq bu m√º≈üt…ôri ≈üikay…ôtin…ô pe≈ü…ôkar cavab yaradƒ±n. 
                                
                                Bank m…ôlumatlarƒ±:
                                - Bank adƒ±: ABB Bank
                                - Z…ông M…ôrk…ôzi: 937
                                - E-po√ßt: info@abb-bank.az
                                
                                ≈ûikay…ôt: {selected_complaint}
                                
                                Cavab h√∂rm…ôtli, pe≈ü…ôkar v…ô h…ôlledici olsun. Bank …ôlaq…ô m…ôlumatlarƒ±nƒ± daxil edin.""",
                                st.session_state.language
                            )
                            
                            st.success("Cavab uƒüurla yaradƒ±ldƒ±!")
                            st.write("**Yaradƒ±lan Cavab:**")
                            st.write(response)
                            
                        except Exception as e:
                            st.error(f"Cavab yaratmaqda x…ôta: {str(e)}")
            else:
                st.warning("Cavab yaratmaq √º√ß√ºn ≈üikay…ôt m√∂vcud deyil")
        else:
            st.warning("M…ôtn m…ôlumatlarƒ± m√∂vcud deyil")
    
    with tab4:
        st.subheader("Tendensiyalar v…ô N√ºmun…ôl…ôr")
        
        try:
            if 'tarix' in data.columns:
                # G√ºnd…ôlik ≈üikay…ôt tendensiyalarƒ±
                data['tarix'] = pd.to_datetime(data['tarix'])
                daily_complaints = data.groupby(data['tarix'].dt.date).size()
                
                fig = px.line(
                    x=daily_complaints.index,
                    y=daily_complaints.values,
                    title="G√ºnd…ôlik ≈ûikay…ôt H…ôcmi"
                )
                st.plotly_chart(fig, use_container_width=True)
                
                # H…ôft…ôlik n√ºmun…ôl…ôr
                data['heftenin_gunu'] = data['tarix'].dt.day_name()
                weekly_pattern = data['heftenin_gunu'].value_counts()
                
                fig = px.bar(
                    x=weekly_pattern.index,
                    y=weekly_pattern.values,
                    title="H…ôft…ônin G√ºnl…ôrin…ô g√∂r…ô ≈ûikay…ôtl…ôr"
                )
                st.plotly_chart(fig, use_container_width=True)
            
            else:
                st.info("Tarix s√ºtunu tapƒ±lmadƒ±. Zaman tendensiyalarƒ± g√∂st…ôril…ô bilm…ôz.")
                
        except Exception as e:
            st.error(f"Tendensiya t…ôhlilind…ô x…ôta: {str(e)}")

def credit_risk_page_improved(gemini_api):
    """T…ôkmill…ô≈üdirilmi≈ü kredit risk s…ôhif…ôsi"""
    st.title("Kredit Riski v…ô G√∂zl…ônil…ôn ƒ∞tki T…ôhlili")
    st.markdown("---")
    
    # Giri≈ü b√∂lm…ôsi
    st.subheader("M√º≈üt…ôri Risk Qiym…ôtl…ôndirm…ôsi")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**≈û…ôxsi M…ôlumatlar**")
        age = st.slider("Ya≈ü", 18, 80, 35, key="risk_age")
        income = st.number_input("Aylƒ±q G…ôlir (AZN)", 300.0, 15000.0, 1500.0, key="risk_income")
        employment = st.selectbox("ƒ∞≈ü V…ôziyy…ôti", 
                                ['d√∂vl…ôt', 'i≈ü√ßi', 's…ôrb…ôst_i≈ü√ßi', 'i≈üsiz'], 
                                key="risk_employment")
        credit_score = st.slider("Kredit Reytinqi", 300, 850, 650, key="risk_credit_score")
    
    with col2:
        st.write("**Kredit M…ôlumatlarƒ±**")
        loan_amount = st.number_input("Kredit M…ôbl…ôƒüi (AZN)", 1000.0, 100000.0, 25000.0, key="risk_loan_amount")
        debt_to_income = st.slider("Borc-G…ôlir Nisb…ôti", 0.0, 1.0, 0.3, key="risk_dti")
        collateral_value = st.number_input("T…ôminat D…ôy…ôri (AZN)", 0.0, 200000.0, 30000.0, key="risk_collateral")
        loan_to_value = st.slider("Kredit-T…ôminat Nisb…ôti", 0.0, 1.0, 0.8, key="risk_ltv")
    
    # Risk hesablama d√ºym…ôsi
    if st.button("Risk Metrikl…ôr Hesabla", key="calc_risk_btn"):
        try:
            # Sad…ôl…ô≈üdirilmi≈ü model istifad…ô ed…ôr…ôk PD hesabla
            pd_score = calculate_pd_simple(age, income, employment, credit_score, debt_to_income, loan_to_value)
            
            # LGD hesabla
            if collateral_value >= loan_amount:
                lgd = 0.2  # Kifay…ôt t…ôminatla a≈üaƒüƒ± LGD
            else:
                collateral_ratio = collateral_value / loan_amount if loan_amount > 0 else 0
                lgd = max(0.3, 0.8 - (collateral_ratio * 0.5))
            
            # EAD hesabla (sad…ôl…ô≈üdirilmi≈ü)
            ead = loan_amount * 0.85
            
            # G√∂zl…ônil…ôn ƒ∞tki hesabla
            expected_loss = pd_score * lgd * ead
            unexpected_loss = ead * lgd * np.sqrt(pd_score * (1 - pd_score))
            
            # N…ôtic…ôl…ôri g√∂st…ôr
            st.markdown("---")
            st.subheader("Risk Qiym…ôtl…ôndirm…ô N…ôtic…ôl…ôri")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                risk_level = "Y√ºks…ôk" if pd_score > 0.2 else "Orta" if pd_score > 0.1 else "A≈üaƒüƒ±"
                risk_color = "red" if risk_level == "Y√ºks…ôk" else "orange" if risk_level == "Orta" else "green"
                
                st.metric("Defolt Ehtimalƒ± (PD)", f"{pd_score:.2%}")
                st.markdown(f"**Risk S…ôviyy…ôsi:** <span style='color:{risk_color}'>{risk_level}</span>", 
                          unsafe_allow_html=True)
            
            with col2:
                st.metric("Defoltda ƒ∞tki (LGD)", f"{lgd:.2%}")
                st.metric("Defoltda M…ôruz Qalma (EAD)", f"{ead:,.0f} AZN")
            
            with col3:
                st.metric("G√∂zl…ônil…ôn ƒ∞tki (EL)", f"{expected_loss:,.0f} AZN")
                st.metric("G√∂zl…ônilm…ôz ƒ∞tki (UL)", f"{unexpected_loss:,.0f} AZN")
            
            # Risk izahƒ±
            st.subheader("Risk Qiym…ôtl…ôndirm…ô ƒ∞zahƒ±")
            with st.expander("∆ètraflƒ± T…ôhlili G√∂st…ôr"):
                explanation_prompt = f"""
                ABB Bank √º√ß√ºn …ôtraflƒ± kredit risk qiym…ôtl…ôndirm…ô izahƒ± verin:
                
                ABB Bank m…ôlumatlarƒ±:
                - Bank adƒ±: ABB Bank
                - Z…ông M…ôrk…ôzi: 937  
                - E-po√ßt: info@abb-bank.az
                
                M√º≈üt…ôri Profili:
                - Ya≈ü: {age} il
                - Aylƒ±q G…ôlir: {income:,.0f} AZN
                - ƒ∞≈ü V…ôziyy…ôti: {employment}
                - Kredit Reytinqi: {credit_score}
                
                Kredit T…ôf…ôrr√ºatlarƒ±:
                - M…ôbl…ôƒü: {loan_amount:,.0f} AZN
                - Borc-G…ôlir Nisb…ôti: {debt_to_income:.1%}
                - Kredit-T…ôminat Nisb…ôti: {loan_to_value:.1%}
                
                Risk Metrikl…ôr:
                - PD: {pd_score:.2%}
                - G√∂zl…ônil…ôn ƒ∞tki: {expected_loss:,.0f} AZN
                - Risk S…ôviyy…ôsi: {risk_level}
                
                ABB Bank-ƒ±n risk idar…ôetm…ô siyas…ôtini n…ôz…ôr…ô alaraq …ôsas q…ôrar verin v…ô izah edin q…ôrarƒ±n s…ôb…ôbini.
                """
                
                try:
                    explanation = gemini_api.generate_response(explanation_prompt, st.session_state.language)
                    st.write(explanation)
                except Exception as e:
                    st.error(f"ƒ∞zah yaradƒ±lmasƒ±nda x…ôta: {str(e)}")
            
        except Exception as e:
            st.error(f"Risk hesablanmasƒ±nda x…ôta: {str(e)}")

def calculate_pd_simple(age, income, employment, credit_score, debt_to_income, loan_to_value):
    """Sad…ôl…ô≈üdirilmi≈ü PD hesablamasƒ±"""
    base_pd = 0.15
    
    # Ya≈ü faktoru
    if age < 25 or age > 65:
        age_factor = 0.03
    elif 35 <= age <= 50:
        age_factor = -0.02
    else:
        age_factor = 0
    
    # G…ôlir faktoru
    income_factor = -0.00002 * income if income > 0 else 0.1
    
    # ƒ∞≈ü faktoru
    emp_factors = {'d√∂vl…ôt': -0.03, 'i≈ü√ßi': -0.01, 's…ôrb…ôst_i≈ü√ßi': 0.02, 'i≈üsiz': 0.15}
    employment_factor = emp_factors.get(employment, 0)
    
    # Kredit reytinq faktoru
    credit_factor = -0.0002 * (credit_score - 600)
    
    # DTI faktoru
    dti_factor = debt_to_income * 0.1
    
    # LTV faktoru
    ltv_factor = loan_to_value * 0.05
    
    pd = base_pd + age_factor + income_factor + employment_factor + credit_factor + dti_factor + ltv_factor
    return max(0.01, min(0.95, pd))

def product_insights_page_improved(gemini_api):
    """T…ôkmill…ô≈üdirilmi≈ü m…ôhsul t…ôhlill…ôri s…ôhif…ôsi"""
    st.title("M…ôhsul T…ôhlill…ôri v…ô √áarpaz Satƒ±≈ü Analizi")
    st.markdown("---")
    
    # Fayl y√ºkl…ôm…ô b√∂lm…ôsi
    st.subheader("M…ôlumat Y√ºkl…ôyin")
    uploaded_file = st.file_uploader(
        "M√º≈üt…ôri m…ôlumatlarƒ± faylƒ±nƒ± se√ßin (CSV, Excel, JSON)",
        type=['csv', 'xlsx', 'json'],
        help="M√º≈üt…ôri m…ôlumatlarƒ±nƒ± t…ôhlil √º√ß√ºn y√ºkl…ôyin. G√∂zl…ônil…ôn s√ºtunlar: m√º≈üt…ôri_id, ya≈ü, g…ôlir, m…ôhsul_sayƒ±, region, vb."
    )
    
    # M…ôlumatlarƒ± y√ºkl…ô v…ô emal et
    if uploaded_file is not None:
        customer_df = validate_uploaded_file(uploaded_file)
        if customer_df is not None:
            st.session_state.customer_data = customer_df
            st.success(f"Fayl uƒüurla y√ºkl…ôndi! {len(customer_df)} m√º≈üt…ôri m…ôlumatƒ± emal edil…ôc…ôk.")
        else:
            st.error("Fayl emal edil…ô bilm…ôdi. Z…ôhm…ôt olmasa d√ºzg√ºn format yoxlayƒ±n.")
            return
    else:
        # N√ºmun…ô m…ôlumatlar istifad…ô et
        try:
            _, _, customer_df = generate_sample_data_fixed()
            st.session_state.customer_data = customer_df
            st.info("N√ºmun…ô m…ôlumatlar istifad…ô edilir. H…ôqiqi t…ôhlil √º√ß√ºn √∂z faylƒ±nƒ±zƒ± y√ºkl…ôyin.")
        except Exception as e:
            st.error(f"N√ºmun…ô m…ôlumatlarƒ±n y√ºkl…ônm…ôsind…ô x…ôta: {str(e)}")
            return
    
    customer_df = st.session_state.customer_data
    
    if customer_df is None or customer_df.empty:
        st.warning("M…ôlumat yoxdur. Z…ôhm…ôt olmasa d√ºzg√ºn fayl y√ºkl…ôyin.")
        return
    
    # M…ôlumat keyfiyy…ôti yoxlanmasƒ±
    st.subheader("M…ôlumat Keyfiyy…ôti")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("√úmumi Qeydl…ôr", len(customer_df))
    with col2:
        missing_pct = (customer_df.isnull().sum().sum() / (len(customer_df) * len(customer_df.columns))) * 100
        st.metric("√áatƒ±≈ümayan M…ôlumat", f"{missing_pct:.1f}%")
    with col3:
        numeric_cols = customer_df.select_dtypes(include=[np.number]).columns
        st.metric("R…ôq…ômsal S√ºtunlar", len(numeric_cols))
    with col4:
        duplicates = customer_df.duplicated().sum()
        st.metric("T…ôkrar Qeydl…ôr", duplicates)
    
    # ∆èsas t…ôhlil se√ßimi
    analysis_type = st.selectbox(
        "T…ôhlil n√∂v√ºn√º se√ßin:",
        ["M√º≈üt…ôri Seqmentasiyasƒ±", "M…ôhsul Meyil Analizi", "Regional Analiz", "G…ôlir v…ô Davranƒ±≈ü Analizi"]
    )
    
    try:
        if analysis_type == "M√º≈üt…ôri Seqmentasiyasƒ±":
            perform_customer_segmentation(customer_df, gemini_api)
        elif analysis_type == "M…ôhsul Meyil Analizi":
            perform_product_propensity_analysis(customer_df, gemini_api)
        elif analysis_type == "Regional Analiz":
            perform_regional_analysis(customer_df, gemini_api)
        elif analysis_type == "G…ôlir v…ô Davranƒ±≈ü Analizi":
            perform_income_behavior_analysis(customer_df, gemini_api)
    except Exception as e:
        st.error(f"T…ôhlild…ô x…ôta: {str(e)}")
    
    # √úmumi AI Strategiya B√∂lm…ôsi
    st.markdown("---")
    st.subheader("ü§ñ AI t…ôr…ôfind…ôn H…ôrt…ôr…ôfli M…ôhsul Strategiyasƒ±")
    st.info("Y√ºkl…ôn…ôn m…ôlumatlara …ôsas…ôn ABB Bank √º√ß√ºn √ºmumi strategiya t√∂vsiy…ôl…ôri")
    
    if st.button("H…ôrt…ôr…ôfli Strategiya Yarat", key="comprehensive_strategy", type="primary"):
        with st.spinner("ABB Bank √º√ß√ºn h…ôrt…ôr…ôfli strategiya yaradƒ±lƒ±r..."):
            comprehensive_strategy = generate_comprehensive_product_strategy(customer_df, gemini_api)
            st.write(comprehensive_strategy)

def perform_customer_segmentation(customer_df, gemini_api):
    """M√º≈üt…ôri seqmentasiya t…ôhlili"""
    st.subheader("M√º≈üt…ôri Seqmentasiyasƒ±")
    
    # M√∂vcud s√ºtunlarƒ± yoxla v…ô uyƒüunla≈ü
    age_col = find_column(customer_df, ['yas', 'age', 'ya≈ü'])
    income_col = find_column(customer_df, ['gelir', 'income', 'g…ôlir'])
    tenure_col = find_column(customer_df, ['muddet_ay', 'tenure', 'm√ºdd…ôt'])
    
    if not all([age_col, income_col]):
        st.error("Seqmentasiya √º√ß√ºn 'ya≈ü' v…ô 'g…ôlir' s√ºtunlarƒ± t…ôl…ôb olunur.")
        return
    
    # Seqment t…ôyin etm…ô funksiyasƒ±
    def assign_segment(row):
        age = row[age_col] if age_col else 35
        income = row[income_col] if income_col else 1000
        tenure = row[tenure_col] if tenure_col else 12
        
        if 25 <= age <= 35 and income >= 1200:
            return 'G…ônc Pe≈ü…ôkar'
        elif 35 <= age <= 50 and income >= 1800:
            return 'Sabit'
        elif income >= 3000:
            return 'Premium'
        elif age >= 55:
            return 'Ya≈ülƒ±'
        elif age <= 25:
            return 'T…ôl…ôb…ô/Ba≈ülanƒüƒ±c'
        else:
            return 'K√ºtl…ôvi Bazar'
    
    customer_df['seqment'] = customer_df.apply(assign_segment, axis=1)
    
    # Vizualla≈üdƒ±rma
    col1, col2 = st.columns(2)
    
    with col1:
        segment_counts = customer_df['seqment'].value_counts()
        fig = px.pie(values=segment_counts.values, names=segment_counts.index, 
                    title="M√º≈üt…ôri Seqmentl…ôri")
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        if income_col:
            fig = px.box(customer_df, x='seqment', y=income_col, 
                        title="Seqmentl…ôr…ô g√∂r…ô G…ôlir Paylanmasƒ±")
            fig.update_layout(xaxis_tickangle=45)
            st.plotly_chart(fig, use_container_width=True)
    
    # AI Seqment Strategiyasƒ±
    st.markdown("---")
    if st.button("Seqment Strategiyasƒ± Yarat", key="segment_strategy"):
        with st.spinner("Seqment strategiyasƒ± yaradƒ±lƒ±r..."):
            segment_analysis = analyze_customer_segments(customer_df, segment_counts, gemini_api)
            st.write(segment_analysis)

def perform_product_propensity_analysis(customer_df, gemini_api):
    """M…ôhsul meyil t…ôhlili"""
    st.subheader("M…ôhsul Meyil Analizi")
    
    # M√º≈üt…ôri se√ß
    customer_id_col = find_column(customer_df, ['musteri_id', 'customer_id', 'id'])
    
    if customer_id_col:
        customer_ids = customer_df[customer_id_col].head(20).tolist()
        selected_customer_id = st.selectbox(
            "T…ôhlil √º√ß√ºn M√º≈üt…ôri Se√ßin:",
            customer_ids,
            key="product_customer_select"
        )
        
        if selected_customer_id:
            customer_data = customer_df[customer_df[customer_id_col] == selected_customer_id].iloc[0]
            
            col1, col2 = st.columns([1, 2])
            
            with col1:
                st.write("**M√º≈üt…ôri Profili:**")
                # M√∂vcud s√ºtunlarƒ± dinamik ≈ü…ôkild…ô g√∂st…ôr - daha etibarlƒ± yolla
                
                # Ya≈ü s√ºtunu
                age_col = find_column(customer_df, ['yas', 'age', 'ya≈ü'])
                if age_col and age_col in customer_data.index:
                    st.write(f"Ya≈ü: {customer_data[age_col]}")
                
                # G…ôlir s√ºtunu
                income_col = find_column(customer_df, ['gelir', 'income', 'g…ôlir'])
                if income_col and income_col in customer_data.index:
                    st.write(f"G…ôlir: {customer_data[income_col]}")
                
                # M√ºdd…ôt s√ºtunu
                tenure_col = find_column(customer_df, ['muddet_ay', 'tenure', 'm√ºdd…ôt'])
                if tenure_col and tenure_col in customer_data.index:
                    st.write(f"M√ºdd…ôt (ay): {customer_data[tenure_col]}")
                
                # M…ôhsul sayƒ± s√ºtunu
                product_col = find_column(customer_df, ['mehsul_sayi', 'products', 'm…ôhsul_sayƒ±'])
                if product_col and product_col in customer_data.index:
                    st.write(f"M…ôhsul sayƒ±: {customer_data[product_col]}")
                
                # Region s√ºtunu
                region_col = find_column(customer_df, ['region', '≈ü…ôh…ôr', 'city'])
                if region_col and region_col in customer_data.index:
                    st.write(f"Region: {customer_data[region_col]}")
            
            with col2:
                # M…ôhsul meyill…ôrini hesabla
                products = {
                    'Kredit Kartƒ±': calculate_product_propensity_from_data(customer_data, customer_df, 'kredit_kart'),
                    '≈û…ôxsi Kredit': calculate_product_propensity_from_data(customer_data, customer_df, 'sexsi_kredit'),
                    'Mortgage': calculate_product_propensity_from_data(customer_data, customer_df, 'mortgage'),
                    'ƒ∞nvestisiya Hesabƒ±': calculate_product_propensity_from_data(customer_data, customer_df, 'investisiya'),
                    'Sƒ±ƒüorta': calculate_product_propensity_from_data(customer_data, customer_df, 'sigorta')
                }
                
                prop_df = pd.DataFrame(list(products.items()), columns=['M…ôhsul', 'Meyil'])
                prop_df = prop_df.sort_values('Meyil', ascending=True)
                
                fig = px.bar(prop_df, x='Meyil', y='M…ôhsul', orientation='h',
                           title=f"M√º≈üt…ôri {selected_customer_id} √º√ß√ºn M…ôhsul Meyili",
                           color='Meyil', color_continuous_scale='viridis')
                st.plotly_chart(fig, use_container_width=True)
                
                # √úst t√∂vsiy…ôl…ôr
                st.write("**ƒ∞lk 3 T√∂vsiy…ô:**")
                top_3 = prop_df.tail(3)
                for _, row in top_3.iterrows():
                    st.write(f"‚Ä¢ {row['M…ôhsul']}: {row['Meyil']:.1%} ehtimal")
                    
                # AI t√∂vsiy…ôl…ôri
                if st.button("AI M…ôhsul T√∂vsiy…ôl…ôri", key="ai_product_rec"):
                    generate_product_recommendations(customer_data, gemini_api)

def perform_regional_analysis(customer_df, gemini_api):
    """Regional t…ôhlil"""
    st.subheader("Regional Analiz")
    
    region_col = find_column(customer_df, ['region', '≈ü…ôh…ôr', 'city'])
    income_col = find_column(customer_df, ['gelir', 'income', 'g…ôlir'])
    
    if region_col:
        col1, col2 = st.columns(2)
        
        with col1:
            region_counts = customer_df[region_col].value_counts()
            fig = px.pie(values=region_counts.values, names=region_counts.index,
                        title="Regional Paylanma")
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            if income_col:
                avg_income_by_region = customer_df.groupby(region_col)[income_col].mean().sort_values(ascending=True)
                fig = px.bar(x=avg_income_by_region.values, y=avg_income_by_region.index,
                           orientation='h', title="Regiona g√∂r…ô Orta G…ôlir")
                st.plotly_chart(fig, use_container_width=True)
        
        # Regional Strategiya
        st.markdown("---")
        if st.button("Regional Strategiya Yarat", key="regional_strategy"):
            with st.spinner("Regional strategiya yaradƒ±lƒ±r..."):
                regional_analysis = analyze_regional_data(customer_df, region_counts, avg_income_by_region if income_col else None, gemini_api)
                st.write(regional_analysis)
    else:
        st.warning("Regional analiz √º√ß√ºn 'region' s√ºtunu tapƒ±lmadƒ±.")

def perform_income_behavior_analysis(customer_df, gemini_api):
    """G…ôlir v…ô davranƒ±≈ü analizi"""
    st.subheader("G…ôlir v…ô Davranƒ±≈ü Analizi")
    
    income_col = find_column(customer_df, ['gelir', 'income', 'g…ôlir'])
    age_col = find_column(customer_df, ['yas', 'age', 'ya≈ü'])
    
    if income_col and age_col:
        # Ya≈ü v…ô g…ôlir …ôlaq…ôsi - statsmodels olmadan sad…ô scatter plot
        fig = px.scatter(customer_df, x=age_col, y=income_col,
                        title="Ya≈ü v…ô G…ôlir ∆èlaq…ôsi")
        st.plotly_chart(fig, use_container_width=True)
        
        # G…ôlir seqmentl…ôri
        customer_df['gelir_seqment'] = pd.cut(customer_df[income_col], 
                                              bins=3, labels=['A≈üaƒüƒ±', 'Orta', 'Y√ºks…ôk'])
        
        col1, col2 = st.columns(2)
        
        with col1:
            income_seg_counts = customer_df['gelir_seqment'].value_counts()
            fig = px.bar(x=income_seg_counts.index, y=income_seg_counts.values,
                        title="G…ôlir Seqmentl…ôri")
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # M…ôhsul sayƒ± v…ô g…ôlir …ôlaq…ôsi
            product_col = find_column(customer_df, ['mehsul_sayi', 'products'])
            if product_col:
                fig = px.box(customer_df, x='gelir_seqment', y=product_col,
                           title="G…ôlir Seqmentin…ô g√∂r…ô M…ôhsul Sayƒ±")
                st.plotly_chart(fig, use_container_width=True)
        
        # AI analiz t√∂vsiy…ôl…ôri
        if st.button("Davranƒ±≈ü Analizi Yarat", key="behavior_analysis"):
            generate_behavior_analysis(customer_df, income_col, age_col, gemini_api)
    else:
        st.warning("G…ôlir v…ô ya≈ü s√ºtunlarƒ± tapƒ±lmadƒ±. Bu analiz √º√ß√ºn 'gelir' v…ô 'ya≈ü' s√ºtunlarƒ± t…ôl…ôb olunur.")

def analyze_customer_segments(customer_df, segment_counts, gemini_api):
    """M√º≈üt…ôri seqmentl…ôrini AI il…ô analiz et"""
    
    # Seqment statistikalarƒ±nƒ± hazƒ±rla
    age_col = find_column(customer_df, ['yas', 'age', 'ya≈ü'])
    income_col = find_column(customer_df, ['gelir', 'income', 'g…ôlir'])
    product_col = find_column(customer_df, ['mehsul_sayi', 'products', 'm…ôhsul_sayƒ±'])
    
    segment_stats = {}
    if 'seqment' in customer_df.columns:
        for segment in segment_counts.index:
            segment_data = customer_df[customer_df['seqment'] == segment]
            segment_stats[segment] = {
                'sayƒ±': len(segment_data),
                'orta_ya≈ü': segment_data[age_col].mean() if age_col else 0,
                'orta_g…ôlir': segment_data[income_col].mean() if income_col else 0,
                'orta_m…ôhsul': segment_data[product_col].mean() if product_col else 0
            }
    
    strategy_prompt = f"""
    ABB Bank √º√ß√ºn m√º≈üt…ôri seqment analizi v…ô strategiya t√∂vsiy…ôl…ôri:
    
    ABB Bank m…ôlumatlarƒ±:
    - Bank adƒ±: ABB Bank
    - Z…ông M…ôrk…ôzi: 937
    - E-po√ßt: info@abb-bank.az
    
    Seqment T…ôhlili:
    {segment_stats}
    
    √úmumi m…ôlumat:
    - √úmumi m√º≈üt…ôri sayƒ±: {len(customer_df)}
    - ∆èn b√∂y√ºk seqment: {segment_counts.index[0]} ({segment_counts.iloc[0]} m√º≈üt…ôri)
    
    H…ôr seqment √º√ß√ºn:
    1. X√ºsusi m…ôhsul t√∂vsiy…ôl…ôri
    2. Marketinq strategiyasƒ±
    3. √áarpaz satƒ±≈ü imkanlarƒ±
    4. Risk v…ô potensial qiym…ôtl…ôndirm…ô
    
    ABB Bank-ƒ±n m…ôhsul portfelin…ô uyƒüun t…ôklif edin.
    """
    
    try:
        return gemini_api.generate_response(strategy_prompt, st.session_state.language)
    except Exception as e:
        return f"Strategiya yaradƒ±lmasƒ±nda x…ôta: {str(e)}"

def analyze_regional_data(customer_df, region_counts, avg_income_by_region, gemini_api):
    """Regional m…ôlumatlarƒ± AI il…ô analiz et"""
    
    # Regional statistikalarƒ± hazƒ±rla
    regional_stats = {}
    region_col = find_column(customer_df, ['region', '≈ü…ôh…ôr', 'city'])
    
    if region_col:
        for region in region_counts.index:
            region_data = customer_df[customer_df[region_col] == region]
            regional_stats[region] = {
                'm√º≈üt…ôri_sayƒ±': len(region_data),
                'orta_g…ôlir': avg_income_by_region.get(region, 0) if avg_income_by_region is not None else 0,
                'payƒ±': f"{len(region_data)/len(customer_df)*100:.1f}%"
            }
    
    regional_prompt = f"""
    ABB Bank √º√ß√ºn regional analiz v…ô inki≈üaf strategiyasƒ±:
    
    ABB Bank m…ôlumatlarƒ±:
    - Bank adƒ±: ABB Bank
    - Z…ông M…ôrk…ôzi: 937
    - E-po√ßt: info@abb-bank.az
    
    Regional T…ôhlil:
    {regional_stats}
    
    ∆èn √ßox m√º≈üt…ôri: {region_counts.index[0]} ({region_counts.iloc[0]} m√º≈üt…ôri)
    {f"∆èn y√ºks…ôk g…ôlir: {avg_income_by_region.index[-1]} ({avg_income_by_region.iloc[-1]:.0f} AZN)" if avg_income_by_region is not None else ""}
    
    H…ôr region √º√ß√ºn:
    1. Bazar potensialƒ± qiym…ôtl…ôndirm…ô
    2. X√ºsusi m…ôhsul strategiyasƒ±
    3. Filial v…ô xidm…ôt t√∂vsiy…ôl…ôri
    4. R…ôqab…ôt m√∂vqeyi
    5. B√∂y√ºm…ô imkanlarƒ±
    
    ABB Bank-ƒ±n regional inki≈üaf planƒ±nƒ± t…ôqdim edin.
    """
    
    try:
        return gemini_api.generate_response(regional_prompt, st.session_state.language)
    except Exception as e:
        return f"Regional analiz yaradƒ±lmasƒ±nda x…ôta: {str(e)}"

def generate_comprehensive_product_strategy(customer_df, gemini_api):
    """√úmumi m…ôhsul strategiyasƒ± yarat"""
    
    # ∆èsas statistikalarƒ± topla
    age_col = find_column(customer_df, ['yas', 'age', 'ya≈ü'])
    income_col = find_column(customer_df, ['gelir', 'income', 'g…ôlir'])
    tenure_col = find_column(customer_df, ['muddet_ay', 'tenure', 'm√ºdd…ôt'])
    product_col = find_column(customer_df, ['mehsul_sayi', 'products', 'm…ôhsul_sayƒ±'])
    region_col = find_column(customer_df, ['region', '≈ü…ôh…ôr', 'city'])
    digital_col = find_column(customer_df, ['reqemsal_qebul', 'digital_adoption'])
    
    comprehensive_stats = {
        '√ºmumi_m√º≈üt…ôri': len(customer_df),
        'orta_ya≈ü': customer_df[age_col].mean() if age_col else 0,
        'orta_g…ôlir': customer_df[income_col].mean() if income_col else 0,
        'orta_m…ôhsul_sayƒ±': customer_df[product_col].mean() if product_col else 0,
        'orta_m√ºdd…ôt': customer_df[tenure_col].mean() if tenure_col else 0,
    }
    
    # R…ôq…ômsal q…ôbul analizi
    digital_analysis = ""
    if digital_col:
        digital_dist = customer_df[digital_col].value_counts()
        digital_analysis = f"R…ôq…ômsal Q…ôbul: {dict(digital_dist)}"
    
    # Regional paylanma
    regional_analysis = ""
    if region_col:
        regional_dist = customer_df[region_col].value_counts()
        regional_analysis = f"Regional Paylanma: {dict(regional_dist.head(3))}"
    
    strategy_prompt = f"""
    ABB Bank √º√ß√ºn h…ôrt…ôr…ôfli m…ôhsul v…ô √ßarpaz satƒ±≈ü strategiyasƒ± yaradƒ±n:
    
    ABB Bank m…ôlumatlarƒ±:
    - Bank adƒ±: ABB Bank
    - Z…ông M…ôrk…ôzi: 937
    - E-po√ßt: info@abb-bank.az
    
    M√∂vcud M√º≈üt…ôri Bazasƒ± Analizi:
    {comprehensive_stats}
    
    {digital_analysis}
    {regional_analysis}
    
    Z…ôhm…ôt olmasa a≈üaƒüƒ±daklarƒ± t…ôqdim edin:
    
    1. **M…ôhsul Portfel Strategiyasƒ±**:
       - Hansƒ± m…ôhsullarƒ± prioritet etm…ôli
       - Yeni m…ôhsul imkanlarƒ±
       - Cross-selling strategiyalarƒ±
    
    2. **M√º≈üt…ôri Seqment T√∂vsiy…ôl…ôri**:
       - H…ôr seqment √º√ß√ºn uyƒüun m…ôhsullar
       - Targeting strategiyalarƒ±
       - Retention t…ôdbirl…ôri
    
    3. **R…ôq…ômsal Transformasiya**:
       - Mobil banking t…ôkmill…ô≈üdirm…ô
       - AI v…ô personalla≈üdƒ±rma
       - Customer journey optimizasiyasƒ±
    
    4. **Regional ƒ∞nki≈üaf Planƒ±**:
       - B√∂lg…ôl…ôr…ô g√∂r…ô f…ôrql…ôn…ôn yana≈ümalar
       - Filial ≈ü…ôb…ôk…ôsi strategiyasƒ±
    
    5. **Performans G√∂st…ôricil…ôri (KPI)**:
       - Hansƒ± metrikl…ôr izl…ônm…ôli
       - Uƒüur kriteriyalarƒ±
    
    ABB Bank-ƒ±n m√∂vcud xidm…ôt portfeli v…ô Az…ôrbaycan bank bazarƒ±nƒ± n…ôz…ôr…ô alƒ±n.
    """
    
    try:
        return gemini_api.generate_response(strategy_prompt, st.session_state.language)
    except Exception as e:
        return f"Strategiya yaradƒ±lmasƒ±nda x…ôta: {str(e)}"

def find_column(df, possible_names):
    """M√ºxt…ôlif adlarla s√ºtun tap"""
    for name in possible_names:
        if name in df.columns:
            return name
        # Case-insensitive axtarƒ±≈ü
        for col in df.columns:
            if col.lower() == name.lower():
                return col
    return None

def calculate_product_propensity_from_data(customer_data, customer_df, product):
    """H…ôqiqi m…ôlumatlardan m…ôhsul meyili hesabla"""
    age_col = find_column(customer_df, ['yas', 'age', 'ya≈ü'])
    income_col = find_column(customer_df, ['gelir', 'income', 'g…ôlir'])
    
    
    base_scores = {
        'kredit_kart': 0.4,
        'sexsi_kredit': 0.25,
        'mortgage': 0.15,
        'investisiya': 0.2,
        'sigorta': 0.3
    }
    
    score = base_scores.get(product, 0.25)
    
    # Ya≈ü d√ºz…ôli≈ül…ôri
    if product == 'kredit_kart' and 25 <= age <= 45:
        score += 0.15
    elif product == 'mortgage' and 28 <= age <= 45:
        score += 0.2
    elif product == 'investisiya' and age >= 35:
        score += 0.15
    
    # G…ôlir d√ºz…ôli≈ül…ôri
    if income >= 2500:
        score += 0.1
    elif income >= 1500:
        score += 0.05
    
    return min(0.95, score)

def generate_product_recommendations(customer_data, gemini_api):
    """AI m…ôhsul t√∂vsiy…ôl…ôri yarat"""
    rec_prompt = f"""
    ABB Bank √º√ß√ºn bu m√º≈üt…ôri profilin…ô …ôsas…ôn m…ôhsul t√∂vsiy…ôl…ôri yaradƒ±n:
    
    ABB Bank m…ôlumatlarƒ±:
    - Bank adƒ±: ABB Bank
    - Z…ông M…ôrk…ôzi: 937
    - E-po√ßt: info@abb-bank.az
    
    M√º≈üt…ôri Profili: {customer_data.to_dict()}
    
    3 …ôn uyƒüun m…ôhsul t√∂vsiy…ôsi verin v…ô h…ôr birini izah edin.
    """
    
    try:
        recommendations = gemini_api.generate_response(rec_prompt, st.session_state.language)
        st.write(recommendations)
    except Exception as e:
        st.error(f"T√∂vsiy…ôl…ôr yaradƒ±lmasƒ±nda x…ôta: {str(e)}")

def generate_behavior_analysis(customer_df, income_col, age_col, gemini_api):
    """Davranƒ±≈ü analizi yarat"""
    analysis_prompt = f"""
    ABB Bank √º√ß√ºn m√º≈üt…ôri davranƒ±≈ü analizi yaradƒ±n:
    
    ABB Bank m…ôlumatlarƒ±:
    - Bank adƒ±: ABB Bank  
    - Z…ông M…ôrk…ôzi: 937
    - E-po√ßt: info@abb-bank.az
    
    M…ôlumat X√ºlas…ôsi:
    - √úmumi m√º≈üt…ôri sayƒ±: {len(customer_df)}
    - Orta g…ôlir: {customer_df[income_col].mean():.0f} AZN
    - Orta ya≈ü: {customer_df[age_col].mean():.0f} il
    - G…ôlir diapazon: {customer_df[income_col].min():.0f} - {customer_df[income_col].max():.0f} AZN
    
    3 …ôsas davranƒ±≈ü n√ºmun…ôsi v…ô marketinq t√∂vsiy…ôl…ôri verin.
    """
    
    try:
        analysis = gemini_api.generate_response(analysis_prompt, st.session_state.language)
        st.write(analysis)
    except Exception as e:
        st.error(f"Analiz yaradƒ±lmasƒ±nda x…ôta: {str(e)}")

def knowledge_search_page_improved(gemini_api):
    """T…ôkmill…ô≈üdirilmi≈ü bilik axtarƒ±≈ü s…ôhif…ôsi"""
    st.title("Bilik Axtarƒ±≈üƒ± v…ô RAG Sistemi")
    st.markdown("---")
    
    # Bilik bazasƒ±nƒ± ba≈ülat (m√∂vcud deyils…ô)
    if 'kb_docs' not in st.session_state:
        st.session_state.kb_docs = [
            {
                'title': 'ABB Bank Kredit Kartƒ± Qaydalari',
                'content': 'ABB Bank kredit kartƒ±nƒ±n istifad…ô qaydalari: Aylƒ±q komissiya 2 AZN, naƒüd pul √ßƒ±xarma 1.5%, minimum √∂d…ôni≈ü 5%. 24/7 online idar…ôetm…ô. Cashback proqramƒ± m√∂vcuddur. ∆èlav…ô m…ôlumat √º√ß√ºn: 937 v…ô ya info@abb-bank.az',
                'category': 'mehsullar'
            },
            {
                'title': 'ABB Mobil Banking Xidm…ôtl…ôri',
                'content': 'ABB mobil t…ôtbiq vasit…ôsil…ô: pul k√∂√ß√ºrm…ôl…ôri, hesab yoxlanmasƒ±, kommunal √∂d…ôni≈ül…ôr, kredit √∂d…ôni≈ül…ôri. Biometrik giri≈ü, push bildiri≈ül…ôr. Texniki d…ôst…ôk: 937, info@abb-bank.az',
                'category': 'reqemsal'
            },
            {
                'title': 'ABB Bank Kredit ≈û…ôrtl…ôri',
                'content': 'ABB Bank f…ôrdi kreditl…ôr: minimum g…ôlir 500 AZN, maksimum 50,000 AZN, m√ºdd…ôt 60 aya q…ôd…ôr, faiz 12-18%. Z…ôman…ôt v…ô ya girov t…ôl…ôb olunur. M…ôsl…ôh…ôt √º√ß√ºn: 937 v…ô ya info@abb-bank.az',
                'category': 'kreditler'
            },
            {
                'title': 'ABB Bank ∆èlaq…ô M…ôlumatlarƒ±',
                'content': 'ABB Bank …ôlaq…ô m…ôlumatlarƒ±: Z…ông M…ôrk…ôzi 937 (24/7), E-po√ßt info@abb-bank.az, Onlayn banking, mobil t…ôtbiq. ≈ûikay…ôtl…ôr v…ô t…ôklifl…ôr √º√ß√ºn h…ôm√ßinin yazƒ±lƒ± m√ºraci…ôt ed…ô bil…ôrsiniz.',
                'category': 'umumi'
            }
        ]
    
    # S…ôn…ôd idar…ôetm…ôsi
    st.subheader("Bilik Bazasƒ± ƒ∞dar…ôetm…ôsi")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        with st.expander("Yeni S…ôn…ôd ∆èlav…ô Et"):
            title = st.text_input("S…ôn…ôd Ba≈ülƒ±ƒüƒ±", key="kb_title")
            category = st.selectbox("Kateqoriya", ['mehsullar', 'reqemsal', 'kreditler', 'umumi'], key="kb_category")
            content = st.text_area("M…ôzmun", height=100, key="kb_content")
            
            if st.button("S…ôn…ôd ∆èlav…ô Et", key="add_doc_btn"):
                if title and content:
                    new_doc = {
                        'title': title,
                        'content': content,
                        'category': category
                    }
                    st.session_state.kb_docs.append(new_doc)
                    st.success(f"'{title}' s…ôn…ôdi uƒüurla …ôlav…ô edildi!")
                    st.rerun()
                else:
                    st.warning("Z…ôhm…ôt olmasa h…ôm ba≈ülƒ±q h…ôm d…ô m…ôzmunu doldurun.")
    
    with col2:
        st.metric("√úmumi S…ôn…ôdl…ôr", len(st.session_state.kb_docs))
        
        categories = [doc['category'] for doc in st.session_state.kb_docs]
        if categories:
            cat_counts = pd.Series(categories).value_counts()
            for cat, count in cat_counts.items():
                st.write(f"{cat}: {count}")
    
    # Axtarƒ±≈ü interfeysi
    st.subheader("Bilik Axtarƒ±≈üƒ±")
    
    query = st.text_input(
        "Bank xidm…ôtl…ôri haqqƒ±nda sual verin:",
        placeholder="Kredit kartƒ±nƒ±n komissiyasƒ± n…ô q…ôd…ôrdir?",
        key="kb_query"
    )
    
    if query:
        try:
            # Sad…ô axtarƒ±≈ü t…ôtbiqi
            relevant_docs = search_documents(st.session_state.kb_docs, query)
            
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.write("**AI Cavabƒ±:**")
                
                if relevant_docs:
                    context = " ".join([doc['content'] for doc in relevant_docs[:2]])
                    
                    answer_prompt = f"""
                    ABB Bank bilik bazasƒ± …ôsasƒ±nda bu suala cavab verin:
                    
                    ABB Bank m…ôlumatlarƒ±:
                    - Bank adƒ±: ABB Bank
                    - Z…ông M…ôrk…ôzi: 937
                    - E-po√ßt: info@abb-bank.az
                    
                    Kontekst: {context}
                    Sual: {query}
                    
                    ABB Bank adƒ±ndan faydalƒ± v…ô d…ôqiq cavab verin. Cavabƒ±n sonunda …ôlaq…ô m…ôlumatlarƒ±nƒ± qeyd edin.
                    """
                    
                    with st.spinner("Cavab yaradƒ±lƒ±r..."):
                        answer = gemini_api.generate_response(answer_prompt, st.session_state.language)
                        st.write(answer)
                else:
                    st.write("T…ô…ôss√ºf ki, sualƒ±nƒ±z √º√ß√ºn m√ºvafiq m…ôlumat tapa bilm…ôdim.")
            
            with col2:
                st.write("**M√ºvafiq S…ôn…ôdl…ôr:**")
                
                for i, doc in enumerate(relevant_docs[:3]):
                    with st.expander(f"{doc['title']} ({doc.get('score', 0):.2f})"):
                        st.write(doc['content'][:200] + "...")
        
        except Exception as e:
            st.error(f"Axtarƒ±≈üda x…ôta: {str(e)}")

def search_documents(docs, query):
    """Sad…ô s…ôn…ôd axtarƒ±≈ü t…ôtbiqi"""
    query_words = query.lower().split()
    
    scored_docs = []
    for doc in docs:
        content_lower = doc['content'].lower()
        title_lower = doc['title'].lower()
        
        # Sad…ô uyƒüunluq balƒ± hesabla
        content_score = sum(1 for word in query_words if word in content_lower)
        title_score = sum(2 for word in query_words if word in title_lower)  # Ba≈ülƒ±q uyƒüunluqlarƒ± daha d…ôy…ôrli
        
        total_score = content_score + title_score
        
        if total_score > 0:
            doc_copy = doc.copy()
            doc_copy['score'] = total_score / len(query_words)
            scored_docs.append(doc_copy)
    
    # Bal √ºzr…ô azalan sƒ±rada sƒ±ralama
    return sorted(scored_docs, key=lambda x: x['score'], reverse=True)

# T…ôkmill…ô≈üdirilmi≈ü t…ôtbiqi i≈ü…ô sal
if __name__ == "__main__":
    main()
